{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IsaacMaciasZX/CodigoProeyctoUSAexecution/blob/main/THC_Proyecto2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "ZnfiL5ovzp1D",
        "outputId": "8f9a1c92-8c46-4fd5-c56c-7d87d7da5663"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-7319daca-21c1-4ec8-b255-e4e5836d1649\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-7319daca-21c1-4ec8-b255-e4e5836d1649\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving EXECUTION_USA.csv to EXECUTION_USA.csv\n",
            "         Date             Name  Age   Sex   Race   Crime  Victim Count  \\\n",
            "0  01/17/1977     Gary Gilmore   36  Male  White  Murder             1   \n",
            "1  05/25/1979  John Spenkelink   30  Male  White  Murder             1   \n",
            "2  10/22/1979     Jesse Bishop   46  Male  White  Murder             1   \n",
            "3  03/09/1981      Steven Judy   24  Male  White  Murder             4   \n",
            "4  08/10/1982    Frank Coppola   38  Male  White  Murder             1   \n",
            "\n",
            "         Victim Sex Victim Race             County State   Region  \\\n",
            "0              Male       White               Utah    UT     West   \n",
            "1              Male       White               Leon    FL    South   \n",
            "2              Male       White              Clark    NV     West   \n",
            "3  2 Male, 2 Female       White             Marion    IN  Midwest   \n",
            "4              Male       White  Newport News City    VA    South   \n",
            "\n",
            "          Method Juvenile Volunteer Federal Foreign National  \n",
            "0   Firing Squad       No       Yes      No               No  \n",
            "1  Electrocution       No        No      No               No  \n",
            "2    Gas Chamber       No       Yes      No               No  \n",
            "3  Electrocution       No       Yes      No               No  \n",
            "4  Electrocution       No       Yes      No               No  \n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from numpy import linalg as LA\n",
        "import matplotlib.pyplot as plt #importamos las librerias que utilizaremos\n",
        "import io\n",
        "from google.colab import files\n",
        "uploaded=files.upload()\n",
        "file_name=list(uploaded.keys())[0]\n",
        "df=pd.read_csv(io.BytesIO(uploaded[file_name])) #importamos la base de datos (no leia el formato excel y le pusimos csv)\n",
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info() #Pedimos que nos de la informacion acerca de las columnas de la base de datos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3NFO32ho0HxX",
        "outputId": "b2eda1cf-36a4-48a5-c923-713b334eb404"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1442 entries, 0 to 1441\n",
            "Data columns (total 17 columns):\n",
            " #   Column            Non-Null Count  Dtype \n",
            "---  ------            --------------  ----- \n",
            " 0   Date              1442 non-null   object\n",
            " 1   Name              1442 non-null   object\n",
            " 2   Age               1442 non-null   int64 \n",
            " 3   Sex               1442 non-null   object\n",
            " 4   Race              1442 non-null   object\n",
            " 5   Crime             1442 non-null   object\n",
            " 6   Victim Count      1442 non-null   int64 \n",
            " 7   Victim Sex        1437 non-null   object\n",
            " 8   Victim Race       1436 non-null   object\n",
            " 9   County            1440 non-null   object\n",
            " 10  State             1442 non-null   object\n",
            " 11  Region            1442 non-null   object\n",
            " 12  Method            1442 non-null   object\n",
            " 13  Juvenile          1442 non-null   object\n",
            " 14  Volunteer         1442 non-null   object\n",
            " 15  Federal           1442 non-null   object\n",
            " 16  Foreign National  1442 non-null   object\n",
            "dtypes: int64(2), object(15)\n",
            "memory usage: 191.6+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "F_UnEIHHSPGb",
        "outputId": "3c87f6d5-5f78-45a6-fd12-8199143c4001"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Age  Victim Count\n",
              "count  1442.000000   1442.000000\n",
              "mean     41.479889      1.537448\n",
              "std       9.471676      4.495852\n",
              "min      22.000000      1.000000\n",
              "25%      34.000000      1.000000\n",
              "50%      40.000000      1.000000\n",
              "75%      47.000000      1.750000\n",
              "max      77.000000    168.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-25fe0583-f4de-490b-8aeb-9b5008a97ff5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Victim Count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1442.000000</td>\n",
              "      <td>1442.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>41.479889</td>\n",
              "      <td>1.537448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.471676</td>\n",
              "      <td>4.495852</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>22.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>34.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>40.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>47.000000</td>\n",
              "      <td>1.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>77.000000</td>\n",
              "      <td>168.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25fe0583-f4de-490b-8aeb-9b5008a97ff5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-25fe0583-f4de-490b-8aeb-9b5008a97ff5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-25fe0583-f4de-490b-8aeb-9b5008a97ff5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ddf550fd-6528-4063-83b2-b52546369611\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ddf550fd-6528-4063-83b2-b52546369611')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ddf550fd-6528-4063-83b2-b52546369611 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 496.5275004490488,\n        \"min\": 9.471675763254563,\n        \"max\": 1442.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          41.479889042995836,\n          40.0,\n          1442.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Victim Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 504.16115986135986,\n        \"min\": 1.0,\n        \"max\": 1442.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1442.0,\n          1.5374479889042996,\n          168.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacemos la información respecto al año\n",
        "Date=df['Date']\n",
        "#Pedimos la fecha\n",
        "year=[]\n",
        "for i in Date:\n",
        "  a=i.split('/')  #agrupamos las fechas por año\n",
        "  year.append(a[2])\n",
        "df['Year']=year\n",
        "#Agregamos las ejecuciones por año\n",
        "num_eje=df.groupby('Year').size().reset_index(name='Ejecuciones por año')\n",
        "num_eje.sort_values('Ejecuciones por año',ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6sd6tuEY7cyA",
        "outputId": "ef5ecedf-3f8a-49d2-e5d0-e9d532f9c3ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year  Ejecuciones por año\n",
              "20  1999                   98\n",
              "21  2000                   85\n",
              "18  1997                   74\n",
              "23  2002                   71\n",
              "19  1998                   68\n",
              "22  2001                   66\n",
              "24  2003                   65\n",
              "26  2005                   60\n",
              "25  2004                   59\n",
              "16  1995                   56\n",
              "27  2006                   53\n",
              "30  2009                   52\n",
              "31  2010                   46\n",
              "17  1996                   45\n",
              "32  2011                   43\n",
              "33  2012                   43\n",
              "28  2007                   42\n",
              "34  2013                   39\n",
              "14  1993                   38\n",
              "29  2008                   37\n",
              "35  2014                   35\n",
              "13  1992                   31\n",
              "15  1994                   31\n",
              "36  2015                   28\n",
              "8   1987                   25\n",
              "11  1990                   23\n",
              "5   1984                   21\n",
              "37  2016                   20\n",
              "7   1986                   18\n",
              "6   1985                   18\n",
              "10  1989                   16\n",
              "12  1991                   14\n",
              "9   1988                   11\n",
              "4   1983                    5\n",
              "1   1979                    2\n",
              "3   1982                    2\n",
              "2   1981                    1\n",
              "0   1977                    1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ff577748-d816-4f3d-9578-fe114e5016dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Ejecuciones por año</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1999</td>\n",
              "      <td>98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>2000</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>1997</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>2002</td>\n",
              "      <td>71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1998</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>2001</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>2003</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>2005</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>2004</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1995</td>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>2006</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>2009</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>2010</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1996</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>2011</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>2012</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>2007</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>2013</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1993</td>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>2008</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>2014</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1992</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>1994</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>2015</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1987</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1990</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1984</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>2016</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1986</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1985</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1989</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1991</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1988</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1983</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1979</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1982</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1981</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1977</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff577748-d816-4f3d-9578-fe114e5016dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ff577748-d816-4f3d-9578-fe114e5016dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ff577748-d816-4f3d-9578-fe114e5016dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ff321da6-9ef1-4252-ac9c-59c4aeb65491\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff321da6-9ef1-4252-ac9c-59c4aeb65491')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ff321da6-9ef1-4252-ac9c-59c4aeb65491 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"num_eje\",\n  \"rows\": 38,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 38,\n        \"samples\": [\n          \"1983\",\n          \"1981\",\n          \"1998\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ejecuciones por a\\u00f1o\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 1,\n        \"max\": 98,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          2,\n          42,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_eje.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "JRCgsBAHirZU",
        "outputId": "d4b2c32d-7c96-4107-f87d-0b6f5d97f52c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Ejecuciones por año\n",
              "count            38.000000\n",
              "mean             37.947368\n",
              "std              24.758234\n",
              "min               1.000000\n",
              "25%              18.500000\n",
              "50%              37.500000\n",
              "75%              55.250000\n",
              "max              98.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-45accf99-96a7-4c67-8540-cadedcd35928\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ejecuciones por año</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>38.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>37.947368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>24.758234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>18.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>37.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>55.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>98.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-45accf99-96a7-4c67-8540-cadedcd35928')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-45accf99-96a7-4c67-8540-cadedcd35928 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-45accf99-96a7-4c67-8540-cadedcd35928');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-04b32ec0-f1af-4f8f-8ad2-45dd0dd6dbd6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04b32ec0-f1af-4f8f-8ad2-45dd0dd6dbd6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-04b32ec0-f1af-4f8f-8ad2-45dd0dd6dbd6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"num_eje\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Ejecuciones por a\\u00f1o\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.825489958004948,\n        \"min\": 1.0,\n        \"max\": 98.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.94736842105263,\n          37.5,\n          38.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Sacamos la media de ejecuciones por año\n",
        "a=num_eje['Ejecuciones por año'].mean()\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "19z8TVJGiv1G",
        "outputId": "67038947-ff3f-4db0-b0f7-e51fab3d7bc9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "37.94736842105263"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Vemos en que año hubo más muertes respecto a la media\n",
        "x=num_eje['Year']\n",
        "y=num_eje['Ejecuciones por año']\n",
        "w=np.zeros_like(x)\n",
        "m=np.zeros_like(x)\n",
        "max=num_eje['Ejecuciones por año'].max()\n",
        "\n",
        "#Hacemos un ciclo for para graficar el maximo de ejecuciones en un año\n",
        "for j in range(len(x)):\n",
        "  if y[j]==max:\n",
        "    m[j]=y[j] #cuando y sea el maximo se graficara m\n",
        "  else:\n",
        "    m[j]=0 #y cuando no, será 0 y no aparecera en la grafica\n",
        "\n",
        "for i in range(len(x)):\n",
        "  w[i]=a #graficamos la recta qque representa la media\n",
        "\n",
        "plt.bar(x,y)\n",
        "plt.bar(x,m)\n",
        "plt.plot(x,w,'-r')\n",
        "plt.title('Ejecuciones por año')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Ejecuciones')\n",
        "plt.xticks(rotation=90,fontsize=8)\n",
        "plt.show()\n",
        "plt.savefig('ejecuciones_año.png',dpi=300)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "yJzTPjwmLWMO",
        "outputId": "31fdbed9-3e4d-43ac-c862-41a1397ee5e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Veamos que la máxima cantidad de ejecuciones sucedieron en 1999"
      ],
      "metadata": {
        "id": "2g6DOB8J9z0f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Buscamos por nombre, para ver cuantas veces sale un mismo nombre\n",
        "Name=df['Name']\n",
        "b=input('Ingrese un nombre: ')\n",
        "#Definimos un df. tal que busque en la columna \"Name\" para despues con el intput ver si coincide, haciendolo con un ciclo for\n",
        "v=0\n",
        "l = []\n",
        "for i in Name:\n",
        "  a=i.split(' ') #separamos unicamente el primer nombre\n",
        "  l.append(a)\n",
        "  for j in l:\n",
        "    if j[0]==b: #asi cada que aparezca se sumara a la variable\n",
        "      v=v+1\n",
        "  l=[]\n",
        "print('El nombre sale '+str(v)+' veces')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TzqIpx5u9OYF",
        "outputId": "96194ad2-42c3-48be-bf59-f59c19980a97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese un nombre: John\n",
            "El nombre sale 60 veces\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Y buscamos a cuantas personas fueron voluntarias\n",
        "si_vol=df[df['Volunteer']=='Yes']\n",
        "len(si_vol)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eca-mSm08fcG",
        "outputId": "06a6ed24-0fb9-4bb6-a0ab-3dcc2ccb4d91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "41.479889042995836\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "145"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacemos una comparativa donde se muestre las personas voluntarias y las que no, definiendo una varibale que se llame conteo, y con una función df ya que solo es de si o no\n",
        "conteo=df.groupby('Volunteer').size().reset_index(name='conteo')\n",
        "conteo.sort_values('conteo',ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "-RwwvUYh_lUr",
        "outputId": "df11cadd-3b6e-4c24-be4f-d871b558f332"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Volunteer  conteo\n",
              "0        No    1297\n",
              "1       Yes     145"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-454a5c88-c090-49d2-9681-df1d2fc15211\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Volunteer</th>\n",
              "      <th>conteo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>No</td>\n",
              "      <td>1297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Yes</td>\n",
              "      <td>145</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-454a5c88-c090-49d2-9681-df1d2fc15211')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-454a5c88-c090-49d2-9681-df1d2fc15211 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-454a5c88-c090-49d2-9681-df1d2fc15211');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d726f788-19c2-4c93-a920-1ef3bd6d39d2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d726f788-19c2-4c93-a920-1ef3bd6d39d2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d726f788-19c2-4c93-a920-1ef3bd6d39d2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"conteo\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Volunteer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"conteo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 814,\n        \"min\": 145,\n        \"max\": 1297,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          145,\n          1297\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Buscamos datos faltantes en los \"Voluntarios\"\n",
        "df['Volunteer'].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eukBlUx-UYj7",
        "outputId": "094b6415-f137-4af2-837e-d2c39794da57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficamos, teniendo en cuanta los labels, si y no, el titulo, y la mostramos\n",
        "vol_labels=['No','Si']\n",
        "plt.pie(conteo['conteo'],labels=vol_labels,autopct='%0.1f %%')\n",
        "plt.title('¿Fue voluntario?')\n",
        "plt.axis('equal')\n",
        "plt.savefig('voluntario.png',dpi=300,format='png')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "XgepMOm9_8jr",
        "outputId": "04d85efc-b64e-4e01-cec1-987a80403569"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Buscamos la media de la edad en la cual fueron las ejecuciones\n",
        "edades=df['Age']\n",
        "med_ed=edades.mean()\n",
        "print(med_ed)"
      ],
      "metadata": {
        "id": "fqGWiOymBsdC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Buscamos la edad maxima y minima\n",
        "max_ed=edades.max()\n",
        "print(max_ed)\n",
        "min_ed=edades.min()\n",
        "print(min_ed)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JNvDX9ZpB1E4",
        "outputId": "9cb2debb-d5cc-447f-c0c3-cd132ee02368"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "77\n",
            "22\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Definimos funciones para que al graficar se muestre el promedio, la regresion y las ejecuciones\n",
        "#Definimos funciones que nos regresen, un arreglo de ceros, en variables x,y,w\n",
        "def get_data(N):\n",
        "  x=np.linspace(0,N,N)\n",
        "  y=np.zeros_like(x)\n",
        "  w=np.zeros_like(x)\n",
        "  max=np.zeros_like(x)\n",
        "  min=np.zeros_like(x)\n",
        "  for i in range(N):\n",
        "    y[i]=edades[i]\n",
        "    w[i]=med_ed\n",
        "    max[i]=max_ed\n",
        "    min[i]=min_ed\n",
        "  return x,y,w,max,min\n",
        "\n",
        "x,y,w,max,min=get_data(len(edades))\n",
        "\n",
        "#Definimos la funcion para la gráfica\n",
        "def plot_data(x,y,params,w,max,min):\n",
        "  z=params[0]+params[1]*x\n",
        "  plt.figure()\n",
        "  plt.plot(x,y,'ko',label='Edades',ms=2)\n",
        "  plt.plot(x,z,'-r',label='Regresión')\n",
        "  plt.plot(x,w,'-b',label='Promedio de edades')\n",
        "  plt.plot(x,max,'--m',label='Edad máxima')\n",
        "  plt.plot(x,min,'--g',label='Edad mínima')\n",
        "  plt.grid(lw=2)\n",
        "  plt.title('Edades de las personas ejecutadas')\n",
        "  plt.ylabel('Edad de la perssona ejecutada')\n",
        "  plt.legend()\n",
        "  plt.show()\n",
        "\n",
        "#Definimos una función para crear una regresion lineal,\n",
        "#que nos ayudara a ver como fueron evolucionando los datos de edad a traves del tiempo\n",
        "def linear_regression(N):\n",
        "  x,y,w,max,min=get_data(len(edades))\n",
        "  A=np.vstack([np.ones(len(x)),x]).T\n",
        "  AtA=A.T@A\n",
        "  Aty=A.T@y\n",
        "  params=LA.solve(AtA,Aty)\n",
        "  plot_data(x,y,params,w,max,min)\n",
        "  print(params)\n",
        "  return params"
      ],
      "metadata": {
        "id": "_rOB5EWCC70X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "linear_regression(len(edades))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "hrs4dCCJjuGz",
        "outputId": "1ed0c850-d05c-4b03-920a-5a560955284b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3.69128059e+01 6.33437329e-03]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3.69128059e+01, 6.33437329e-03])"
            ]
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "observemos que con forme avanza el tiempo, laas edades van aumentando, además de que ninguna de las personas ejecutadas era menor de 22 años ni mayor a los 77"
      ],
      "metadata": {
        "id": "VNWMUY7oBlqu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crimen_labels=['Asesinato']\n",
        "tipo_crimen=df.groupby('Crime').size().reset_index(name='Tipo de crimen')"
      ],
      "metadata": {
        "id": "TmveYUdRbFBz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Buscamos datos faltantes\n",
        "df['Crime'].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jUbHjqQkUiyl",
        "outputId": "263a6230-208b-4d16-85f0-bb8b51371c10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficamos con las funciones plt\n",
        "crimen_labels=['Asesinato']\n",
        "tipo_crimen=df.groupby('Crime').size().reset_index(name='Tipo de crimen')\n",
        "plt.pie(tipo_crimen['Tipo de crimen'],labels=crimen_labels,autopct='%0.1f %%')\n",
        "plt.title('Tipo de crimen')\n",
        "plt.axis('equal')\n",
        "plt.savefig('crimen.png',dpi=300,format='png')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "-bs3V3jEw_YZ",
        "outputId": "d0e1a560-0936-4aa8-edac-5bfeb4265354"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Sex'].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0PbPTevoUHjG",
        "outputId": "f3d0b228-6d02-4c92-bccf-4dfa0e32d13d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sexo_labels=['Mujer','Hombre']\n",
        "sexo=df.groupby('Sex').size().reset_index(name='Sexo de la persona ejecutada')\n",
        "plt.pie(sexo['Sexo de la persona ejecutada'],labels=sexo_labels,autopct='%0.1f %%')\n",
        "plt.title('Sexo de la persona ejecutada')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "_3jJSuGrPQUo",
        "outputId": "4cdad631-546f-479f-e8f8-9b014a27bd2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Sexo de la persona ejecutada')"
            ]
          },
          "metadata": {},
          "execution_count": 79
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "raza=df.groupby('Race').size().reset_index(name='Raza de la persona ejecutada')\n",
        "raza.sort_values('Raza de la persona ejecutada')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "rPszsBPLMcs5",
        "outputId": "bfd5f660-54ca-4caa-b4a3-772cfb9137c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Race  Raza de la persona ejecutada\n",
              "4            Other                             2\n",
              "0            Asian                             6\n",
              "3  Native American                            16\n",
              "2           Latino                           120\n",
              "1            Black                           495\n",
              "5            White                           803"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ab43de2-bac8-423e-87dc-c5f9b1a3b4f2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Race</th>\n",
              "      <th>Raza de la persona ejecutada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Other</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Asian</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Native American</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Latino</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Black</td>\n",
              "      <td>495</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>White</td>\n",
              "      <td>803</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ab43de2-bac8-423e-87dc-c5f9b1a3b4f2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0ab43de2-bac8-423e-87dc-c5f9b1a3b4f2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0ab43de2-bac8-423e-87dc-c5f9b1a3b4f2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7be4426a-93f3-413b-8401-a0e29e98c929\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7be4426a-93f3-413b-8401-a0e29e98c929')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7be4426a-93f3-413b-8401-a0e29e98c929 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"raza\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Race\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Other\",\n          \"Asian\",\n          \"White\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Raza de la persona ejecutada\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 334,\n        \"min\": 2,\n        \"max\": 803,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          6,\n          803\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Race'].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vlaVXo0pUv8e",
        "outputId": "1c074111-c1bc-4656-8dd8-eaaf2e083139"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "raza_labels=['Asiático','Negro','Latino','Nativo Americano','Otro','Blanco']\n",
        "plt.pie(raza['Raza de la persona ejecutada'])\n",
        "plt.title('Raza de la persona ejecutada')\n",
        "plt.legend(labels=raza_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "-nt4y2DeYZGU",
        "outputId": "fe5c3cf3-0ff7-4bfc-8b7a-696a9265fa5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7b6da5dcabc0>"
            ]
          },
          "metadata": {},
          "execution_count": 82
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Vemos cuantas victimas fueron en total\n",
        "n_vict=df['Victim Count']"
      ],
      "metadata": {
        "id": "9uhlQ8l0ioq6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Lo \"Graficamos\"\n",
        "n_vict.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "iOcGXF4_oDdc",
        "outputId": "a117a5f3-def3-464c-902a-20903443a231"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    1442.000000\n",
              "mean        1.537448\n",
              "std         4.495852\n",
              "min         1.000000\n",
              "25%         1.000000\n",
              "50%         1.000000\n",
              "75%         1.750000\n",
              "max       168.000000\n",
              "Name: Victim Count, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Victim Count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1442.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.537448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.495852</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>168.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#\n",
        "x=np.linspace(0,len(n_vict),len(n_vict))\n",
        "y=n_vict\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(x,y,label='Samples')\n",
        "plt.title('Número de victimas')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "jBxj_OGlfXnm",
        "outputId": "ccdfc7b5-ba6b-440b-a815-51bfeb8a4d93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(len(n_vict)):\n",
        "  if n_vict[i]==n_vict.max(): #vemos que hay un pico en el numero de victimas, correspondiente a Timothy McVeigh\n",
        "    print(df['Name'][i])\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p14OEJIVgkfA",
        "outputId": "f5f5d476-e6f6-4cf6-84d0-dd009b1f9ca8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Timothy McVeigh*\n",
            "716\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "raza_vict=df.groupby('Victim Race').size().reset_index(name='Raza de la victima')\n",
        "raza_vict.sort_values('Raza de la victima')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 739
        },
        "id": "6pLYKgn4wzrh",
        "outputId": "8e248506-197d-4675-ce74-da008740e3c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   Victim Race  Raza de la victima\n",
              "10            2 White, 2 Asian                   1\n",
              "16           4 White, 1 Latino                   1\n",
              "4             1 White, 3 Asian                   1\n",
              "5            1 White, 3 Latino                   1\n",
              "6            1 White, 8 Latino                   1\n",
              "9            2 White, 1 Latino                   1\n",
              "11            2 White, 3 Black                   1\n",
              "12            2 White, 6 Black                   1\n",
              "14            4 White, 1 Black                   1\n",
              "15  4 White, 1 Black, 1 Latino                   1\n",
              "2             1 White, 2 Black                   2\n",
              "7             2 White, 1 Asian                   2\n",
              "13            3 White, 1 Black                   2\n",
              "3            1 White, 2 Latino                   3\n",
              "8             2 White, 1 Black                   3\n",
              "20             Native American                   3\n",
              "0             1 White, 1 Black                   8\n",
              "1            1 White, 1 Latino                   8\n",
              "17                       Asian                  22\n",
              "19                      Latino                  94\n",
              "18                       Black                 192\n",
              "21                       White                1087"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98766733-15d0-45ff-bb8a-2f5cceeaa293\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Victim Race</th>\n",
              "      <th>Raza de la victima</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2 White, 2 Asian</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>4 White, 1 Latino</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1 White, 3 Asian</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1 White, 3 Latino</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1 White, 8 Latino</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2 White, 1 Latino</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2 White, 3 Black</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2 White, 6 Black</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>4 White, 1 Black</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>4 White, 1 Black, 1 Latino</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1 White, 2 Black</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2 White, 1 Asian</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>3 White, 1 Black</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1 White, 2 Latino</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2 White, 1 Black</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Native American</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1 White, 1 Black</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1 White, 1 Latino</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Asian</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Latino</td>\n",
              "      <td>94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Black</td>\n",
              "      <td>192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>White</td>\n",
              "      <td>1087</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98766733-15d0-45ff-bb8a-2f5cceeaa293')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-98766733-15d0-45ff-bb8a-2f5cceeaa293 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-98766733-15d0-45ff-bb8a-2f5cceeaa293');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6907860e-6445-422c-8f70-1579e834d5b4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6907860e-6445-422c-8f70-1579e834d5b4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6907860e-6445-422c-8f70-1579e834d5b4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"raza_vict\",\n  \"rows\": 22,\n  \"fields\": [\n    {\n      \"column\": \"Victim Race\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"2 White, 2 Asian\",\n          \"1 White, 2 Latino\",\n          \"4 White, 1 Black\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Raza de la victima\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 232,\n        \"min\": 1,\n        \"max\": 1087,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2,\n          94,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Observemos que en el caso de las victimas, pueden ser más de una y pueden ser de distintas razas, por lo que vamos a separarlas"
      ],
      "metadata": {
        "id": "sQMbwstzU3HK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vi_ra=df['Victim Race']"
      ],
      "metadata": {
        "id": "TJbsrU5Ux_Ue"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#vemos si hay datos faltantes en la raza de las victimas\n",
        "n=df['Victim Race'].isnull()\n",
        "n.sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AWgkNz65D-Rj",
        "outputId": "016249e3-5ae0-480c-fea6-0d0666dd3387"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Generamos variables que inicien en 0 por que agregaremos un ciclo for que sume cuantos de cada raza hay y después haremos una lista que contenga estos datos\n",
        "Asiático=0\n",
        "Latino=0\n",
        "Negro=0\n",
        "Blanco=0\n",
        "Nativo=0\n",
        "Sin_Datos=0\n",
        "for i in range(len(vi_ra)):\n",
        "  if n[i]==True:\n",
        "    Sin_Datos=Sin_Datos+1\n",
        "  else:\n",
        "    a=str(vi_ra[i]).split(', ')\n",
        "    if len(a)==1:\n",
        "      if a[0]=='Asian':       #aqui lo hicimos para una victima, por que si lo haciamos para cuantas fueran, marcaba error\n",
        "        Asiático=Asiático+1\n",
        "      elif a[0]=='Latino':    #dividimos por raza, en caso de ser una victima\n",
        "        Latino=Latino+1\n",
        "      elif a[0]=='Black':\n",
        "        Negro=Negro+1\n",
        "      elif a[0]=='White':\n",
        "        Blanco=Blanco+1\n",
        "      elif a[0]=='Native American':\n",
        "        Nativo=Nativo+1\n",
        "    elif len(a)>1:    #si fue mas de una\n",
        "      for j in a:\n",
        "        b=j.split(' ') #separamos, en caso de ser mas de una raza\n",
        "        if b[1]=='Asian':\n",
        "          Asiáti=Asiático+int(b[0]) #en caso de ser mas de una victima de una misma raza,\n",
        "        elif b[1]=='Latino':        #le sumamos a la variable el numero de victimas de didha raza\n",
        "          Latino=Latino+int(b[0])\n",
        "        elif b[1]=='Black':\n",
        "          Negro=Negro+int(b[0])\n",
        "        elif b[1]=='White':\n",
        "          Blanco=Blanco+int(b[0])\n",
        "        elif b[1]=='Native American':\n",
        "          Nativo=Nativo+int(b[0])\n",
        "lista=[Asiático,Latino,Negro,Blanco,Nativo,Sin_Datos] #creamos una lista con todas las variables"
      ],
      "metadata": {
        "id": "M-Jy3njPBkTW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lista"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vzGCz1H6SYjO",
        "outputId": "059e75e2-e65b-4ead-ed13-011ad0d18585"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[22, 122, 220, 1147, 3, 6]"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficamos respecto a la lista generada\n",
        "raza_labels=['Asiático','Latino','Negro','Blanco','Nativo Americano','Otro/Sin datos']\n",
        "plt.pie(lista)\n",
        "plt.title('Raza de la victima')\n",
        "plt.legend(labels=raza_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "FHwoeHM22G0S",
        "outputId": "fce02abf-dbd5-413f-8fed-e967fe0d0839"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7b6d9cf08f70>"
            ]
          },
          "metadata": {},
          "execution_count": 132
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Lo mismo para el exo de las victimas\n",
        "sex_vict=df['Victim Sex']\n",
        "n=df['Victim Sex'].isnull()\n",
        "n.sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_7Jav0awjFTu",
        "outputId": "9a8091f0-5f54-435e-c35f-4dcb3df3a8e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "male = 0\n",
        "female = 0\n",
        "Sin_Datos=0\n",
        "for i in range(len(sex_vict)):\n",
        "  if n[i]==True:\n",
        "    Sin_Datos=Sin_Datos+1\n",
        "  else:\n",
        "    a=str(sex_vict[i]).split(', ')\n",
        "    if len(a)==1:\n",
        "      if a[0]=='Male':\n",
        "        male=male+1\n",
        "      elif a[0]=='Female':\n",
        "        female=female+1\n",
        "    elif len(a)>1:\n",
        "      for j in a:\n",
        "        b=j.split(' ')\n",
        "        if b[1]=='Male':\n",
        "          male=male+int(b[0])\n",
        "        elif b[1]=='Female':\n",
        "          female=female+int(b[0])\n",
        "lista_sexo=[male,female,Sin_Datos]"
      ],
      "metadata": {
        "id": "y-5xIabgjIyU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lista_sexo"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GfbEB8iojLre",
        "outputId": "88ed065e-182b-421a-8b75-4dfa3b069802"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[935, 890, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficamos respecto a la listo basada en el sexo de las ejecuciones\n",
        "raza_labels=['Hombre', \"Mujer\" , \"Otro/Sin datos\"]\n",
        "plt.pie(lista_sexo)\n",
        "plt.title('Sexo de la victima')\n",
        "plt.legend(labels=raza_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "O5SsXgEOjN3D",
        "outputId": "27f6b4c5-be8c-4307-d062-3ee5170121cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7b6da55e9390>"
            ]
          },
          "metadata": {},
          "execution_count": 136
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cond=df['County']"
      ],
      "metadata": {
        "id": "nuyHbXiIoxpa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#vemos donde hay datos faltantes\n",
        "cond.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A4_IYOfep0_l",
        "outputId": "e5b6520b-1b86-47bb-826a-c87d58de27e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 138
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cond.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "mqlpgbfop6zd",
        "outputId": "42b3f7cf-7caa-4415-d7df-c4b41dcde62e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count       1440\n",
              "unique       405\n",
              "top       Harris\n",
              "freq         126\n",
              "Name: County, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>County</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>405</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Harris</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>126</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Buscamos las ejecuciones respecto al condado de mayor a menor\n",
        "Condado=df.groupby('County').size().reset_index(name='Numero de Ejecuciones')\n",
        "Condado.sort_values('Numero de Ejecuciones',ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "tWdQTaStqGKI",
        "outputId": "9dbe900b-91b6-440b-cada-7c445df84052"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       County  Numero de Ejecuciones\n",
              "151    Harris                    126\n",
              "98     Dallas                     55\n",
              "259  Oklahoma                     42\n",
              "36      Bexar                     41\n",
              "354   Tarrant                     38\n",
              "..        ...                    ...\n",
              "196     Leake                      1\n",
              "201   Licking                      1\n",
              "1         Ada                      1\n",
              "203   Lincoln                      1\n",
              "404      Yuma                      1\n",
              "\n",
              "[405 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f5b87c7c-5b97-43ce-ba5b-76e3e2bbe4fc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>County</th>\n",
              "      <th>Numero de Ejecuciones</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>151</th>\n",
              "      <td>Harris</td>\n",
              "      <td>126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>Dallas</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>259</th>\n",
              "      <td>Oklahoma</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>Bexar</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>354</th>\n",
              "      <td>Tarrant</td>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>Leake</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>Licking</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ada</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>203</th>\n",
              "      <td>Lincoln</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404</th>\n",
              "      <td>Yuma</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>405 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f5b87c7c-5b97-43ce-ba5b-76e3e2bbe4fc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f5b87c7c-5b97-43ce-ba5b-76e3e2bbe4fc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f5b87c7c-5b97-43ce-ba5b-76e3e2bbe4fc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fc0d7990-b85e-40ce-91b7-e791a3fce6c4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc0d7990-b85e-40ce-91b7-e791a3fce6c4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fc0d7990-b85e-40ce-91b7-e791a3fce6c4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Condado\",\n  \"rows\": 405,\n  \"fields\": [\n    {\n      \"column\": \"County\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 405,\n        \"samples\": [\n          \"Muscogee\",\n          \"Philadelphia\",\n          \"Horry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Numero de Ejecuciones\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1,\n        \"max\": 126,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          8,\n          14,\n          126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#hacemos una lista con los primeros 5\n",
        "labels=['Tarrant','Bexar','Oklahoma','Dallas','Harris']"
      ],
      "metadata": {
        "id": "wKHIkG5iqwPU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#creamos variables con el numero de ejecuciones en cada condado\n",
        "Tar=Condado['Numero de Ejecuciones'][38]\n",
        "Bex=Condado['Numero de Ejecuciones'][41]\n",
        "Ok=Condado['Numero de Ejecuciones'][42]\n",
        "Dal=Condado['Numero de Ejecuciones'][55]\n",
        "Har=Condado['Numero de Ejecuciones'][151]"
      ],
      "metadata": {
        "id": "PK2XGvuhwBu8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#los 5 condados con mas ejecuciones\n",
        "y=[Tar,Bex,Ok,Dal,Har]\n",
        "plt.bar(labels,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "lxoPd7k4q2o0",
        "outputId": "35e40c2c-6617-45e5-c594-769fa574c01a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 5 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 105
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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qPDw8Erb+/v7y9/f321ZcHBwbU7RSHa7/YZ4ApuG/e4d7HfvYL97x42036905OQir5wk6+fnpw4dOigrK8u1rKKiQllZWYqPj/fGlAAAgEG89hbPmDFjlJqaqo4dO+rOO+/U7NmzVVJSokceecRbUwIAAIbwWqD8/ve/1zfffKOJEyeqoKBAbdu21aZNmyqdOIvv3+L629/+VultLtQu9rt3sN+9g/3uHez3H2ezqvNZHwAAgGuIPxYIAACMQ6AAAADjECgAAMA4BAqAGmvevLlmz579o+u7deumUaNGVXu8d999VzabTadPn/7Jc0PNLVu2zO13S02aNElt27b12nxQtRvtcSFQPMRms132MmnSJG9P0c31/ANh0KBBbvs+NDRUPXv21Mcff+ztqdUJ+fn5evTRRxUZGSk/Pz81a9ZMI0eO1MmTJ709NVzih8/1+vXrKywsTPfee69eeOEFVVRUeHt617VBgwapX79+lZbX5mvrE0884fb7w653BIqHfP31167L7NmzZbfb3ZY98cQTNRrv3LlzlZZduHCBF51q6tmzp2vfZ2VlydfXV3379vXqnMrLy7369avjiy++UMeOHXXw4EG9/PLLOnTokDIzM12/RPHUqVPeniIucfG5fuTIEW3cuFHdu3fXyJEj1bdvX50/f97b00MNVfXab1mWzp8/r0aNGik0NNQLs/IOAsVDwsPDXReHwyGbzea6XlJSopSUFIWFhalRo0a64447tHnzZrfbN2/eXFOmTNHDDz8su92utLQ012HXdevWqVWrVvL399exY8e0e/du3XvvvbrpppvkcDjUtWtX7d271208m82mxYsX67777lPDhg0VGxurdevWSZKOHDmi7t27S5IaN24sm82mQYMGXZP9dK34+/u79n/btm01btw45efn65tvvpH0/VGCAQMGKDg4WCEhIUpOTtaRI0ckSZ999pkaNmyoVatWucZ79dVXFRAQoH//+9+SVO3HYOHChfrtb3+rwMBAPfPMM9fmzv8Ew4cPl5+fn95++2117dpV0dHR6tWrlzZv3qyvvvpKTz31VJW3W7x4sYKDg3/0f3crVqxQx44dFRQUpPDwcD344IM6ceJEpe1ycnLUsWNHNWzYUJ07d9aBAwfc1i9cuFA333yz/Pz89Mtf/lIrVqxwW2+z2fT888+rb9++atiwoeLi4pSdna1Dhw6pW7duCgwMVOfOnfWf//zHdZv//Oc/Sk5Ovuz3p8kuPtebNm2q9u3b63/+53/0xhtvaOPGjVq2bJkkadasWWrdurUCAwMVFRWlYcOGqbi4uNpf40rPd8uyNGnSJEVHR8vf31+RkZF6/PHHPX1X65yTJ0/qD3/4g5o2baqGDRuqdevWevnll9226datm0aMGKFRo0bppptuUmJiousozMaNG9WhQwf5+/vrgw8+qPQWz7vvvqs777xTgYGBCg4OVpcuXXT06NFrfC9rD4FyDRQXF6t3797KysrSRx99pJ49eyopKUnHjh1z227GjBlq06aNPvroI02YMEGSdPbsWU2bNk2LFy/Wp59+qiZNmujMmTNKTU3VBx98oB07dig2Nla9e/fWmTNn3MabPHmyBgwYoI8//li9e/dWSkqKTp06paioKL322muSpAMHDujrr7/WnDlzrs3O8ILi4mK99NJLatGihUJDQ1VeXq7ExEQFBQXp/fff1/bt29WoUSP17NlT586dU8uWLTVjxgwNGzZMx44d05dffqk//elPmjZtmlq1aiVJ1X4MJk2apPvuu0+ffPKJHn30UW/c/Wo7deqU3nrrLQ0bNkwBAQFu68LDw5WSkqJXXnml0p9Jnz59usaNG6e3335bPXr0qHLs8vJyTZkyRfv27dPatWt15MiRKqP4qaee0syZM7Vnzx75+vq67bM1a9Zo5MiR+stf/qL9+/dr6NCheuSRR7R161a3MS6Gfm5urlq2bKkHH3xQQ4cOVXp6uvbs2SPLsjRixAjX9tX9/qxL7rnnHrVp00avv/66JMnHx0dz587Vp59+quXLl2vLli0aO3Zstce70vP9tdde03PPPafnn39eBw8e1Nq1a9W6detauW91SWlpqTp06KANGzZo//79SktL00MPPaRdu3a5bbd8+XL5+flp+/btyszMdC0fN26cpk6dqry8PN1+++1utzl//rz69eunrl276uOPP1Z2drbS0tKurz+ga8Hjli5dajkcjstuc+utt1rz5s1zXW/WrJnVr1+/SuNIsnJzcy871oULF6ygoCDrzTffdC2TZI0fP951vbi42JJkbdy40bIsy9q6daslyfr222+rea/qjtTUVKtevXpWYGCgFRgYaEmyIiIirJycHMuyLGvFihXWL3/5S6uiosJ1m7KyMisgIMB66623XMv69Olj/epXv7J69Ohh/eY3v3Hb/lI/9hiMGjWqFu5h7dixY4clyVqzZk2V62fNmmVJsgoLC61mzZpZzz33nDV27FgrIiLC2r9/v9u2Xbt2tUaOHPmjX2v37t2WJOvMmTOWZf3/5+PmzZtd22zYsMGSZH333XeWZVlW586drSFDhriN88ADD1i9e/d2Xb/0eZ+dnW1JspYsWeJa9vLLL1sNGjS47L649PvTVKmpqVZycnKV637/+99bcXFxVa5bvXq1FRoa6rp+6WvW3/72N6tNmzY/+nUvfb7PnDnTuuWWW6xz587V+D7UVZe+zly8NGjQ4LKvrX369LH+8pe/uK537drVateunds2F78f1q5d67b8h4/LyZMnLUnWu+++69H7ZRKOoFwDxcXFeuKJJxQXF6fg4GA1atRIeXl5lf6H1rFjx0q39fPzq1TOhYWFGjJkiGJjY+VwOGS321VcXFxpvB/eLjAwUHa7vcrD6tej7t27Kzc3V7m5udq1a5cSExPVq1cvHT16VPv27dOhQ4cUFBSkRo0aqVGjRgoJCVFpaanbof8XXnhBH3/8sfbu3atly5a5/c+kuo9BVY+p6axq/nLpmTNnatGiRfrggw906623XnbbnJwcJSUlKTo6WkFBQerataskXfY5GxERIUmu52xeXp66dOnitn2XLl2Ul5f3o2Nc/NMZP/zffFhYmEpLS+V0OiVV//uzrrEsy/Wc3bx5s3r06KGmTZsqKChIDz30kE6ePKmzZ89Wa6wrPd8feOABfffdd/rFL36hIUOGaM2aNTfE+S8/fJ25eFm8eLFr/YULFzRlyhS1bt1aISEhatSokd56661Kz60OHTpUOf7lXj9CQkI0aNAgJSYmKikpSXPmzNHXX3/tmTtmCALlGnjiiSe0Zs0aPfvss3r//feVm5ur1q1bVzoZKjAwsNJtAwICKh2yS01NVW5urubMmaMPP/xQubm5Cg0NrTRe/fr13a7bbLYb5iTbwMBAtWjRQi1atNAdd9yhxYsXq6SkRIsWLVJxcbE6dOhQ6YXl888/14MPPugaY9++fSopKVFJSUmlb/zqPgZVPaamatGihWw2W6Uf+Bfl5eWpcePG+tnPfiZJ+tWvfqULFy7o1Vdfvey4JSUlSkxMlN1u18qVK7V7926tWbNGUuUTAn/4nL34vK/pc7aqMS43bnW/P+uavLw8xcTE6MiRI+rbt69uv/12vfbaa8rJydH8+fMlVX1CZlWu9HyPiorSgQMHtGDBAgUEBGjYsGH69a9/XSdODP8pfvg6c/HStGlT1/r/+7//05w5c/Tkk09q69atys3NVWJiYrVfJ670+rF06VJlZ2erc+fOeuWVV3TLLbdox44dP/2OGcJrfyzwRrJ9+3YNGjRI9913n6Tv/8d28YTMqx1vwYIF6t27t6TvT/j873//W6Mx/Pz8JH1f+DcCm80mHx8ffffdd2rfvr1eeeUVNWnSRHa7vcrtT506pUGDBumpp57S119/rZSUFO3du9d1boYnHgPThIaG6t5779WCBQs0evRot/NQCgoKtHLlSj388MOuH/B33nmnRowYoZ49e8rX1/dHP6n22Wef6eTJk5o6daqioqIkSXv27Knx/OLi4rR9+3alpqa6lm3fvt11XtDV8vT3pwm2bNmiTz75RKNHj1ZOTo4qKio0c+ZM+fh8/3/SK0XlparzfA8ICFBSUpKSkpI0fPhwtWzZUp988onat2/vmTtVB23fvl3Jycn64x//KOn7KP78889/8nP2h9q1a6d27dopPT1d8fHxWrVqle666y6Pje9NHEG5BmJjY/X6668rNzdX+/bt04MPPviTjmTExsZqxYoVysvL086dO5WSklLppMYradasmWw2m9avX69vvvmmRmf01wVlZWUqKChQQUGB8vLy9Nhjj6m4uFhJSUlKSUnRTTfdpOTkZL3//vs6fPiw3n33XT3++OP68ssvJUl/+tOfFBUVpfHjx2vWrFm6cOGC2w9gTzwGJvr73/+usrIyJSYmatu2bcrPz9emTZt07733qmnTppU+idS5c2f961//0uTJk3/0F7dFR0fLz89P8+bN0xdffKF169ZpypQpNZ7bX//6Vy1btkwLFy7UwYMHNWvWLL3++us1/gj/pTz9/XmtXXyuf/XVV9q7d6+effZZJScnq2/fvnr44YfVokULlZeXu/b/ihUr3E7ErI4rPd+XLVumJUuWaP/+/friiy/00ksvKSAgQM2aNfP03a1TYmNj9c477+jDDz9UXl6ehg4dqsLCQo+MffjwYaWnpys7O1tHjx7V22+/rYMHDyouLs4j45uAQLkGZs2apcaNG6tz585KSkpSYmLiT/pfxZIlS/Ttt9+qffv2euihh/T444+rSZMmNRqjadOmmjx5ssaNG6ewsDC3TzVcDzZt2qSIiAhFRESoU6dO2r17t1avXq1u3bqpYcOG2rZtm6Kjo3X//fcrLi5OgwcPVmlpqex2u1588UX961//0ooVK+Tr66vAwEC99NJLWrRokTZu3CjJM4+BiWJjY7Vnzx794he/0IABA3TzzTcrLS1N3bt3V3Z2tkJCQird5u6779aGDRs0fvx4zZs3r9L6n/3sZ1q2bJlWr16tVq1aaerUqZoxY0aN59avXz/NmTNHM2bM0K233qrnn39eS5cuVbdu3a7mrrp4+vvzWrv4XG/evLl69uyprVu3au7cuXrjjTdUr149tWnTRrNmzdK0adN02223aeXKlcrIyKjR17jS8z04OFiLFi1Sly5ddPvtt2vz5s168803b6jf2VGV8ePHq3379kpMTFS3bt0UHh5e5S93uxoNGzbUZ599pv79++uWW25RWlqahg8frqFDh3pkfBPYrOqeEQcAAHCNcAQFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgnP8HAvBR+14zXpMAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#repetimos casi lo mismo para los estados\n",
        "st=df['State']\n",
        "st.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "VzZlDFqU2db0",
        "outputId": "b5c45dfc-f8d6-4249-c3ea-c76de052a155"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     1442\n",
              "unique      35\n",
              "top         TX\n",
              "freq       538\n",
              "Name: State, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1442</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>TX</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Estado=df.groupby('State').size().reset_index(name='Numero de Ejecuciones')\n",
        "Estado.sort_values('Numero de Ejecuciones',ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "-8uXOI0H2kTY",
        "outputId": "8dff5b39-2dcb-46a6-dd3a-d1ff91ac7798"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   State  Numero de Ejecuciones\n",
              "30    TX                    538\n",
              "24    OK                    112\n",
              "32    VA                    111\n",
              "8     FL                     92\n",
              "16    MO                     87\n",
              "9     GA                     69\n",
              "0     AL                     58\n",
              "23    OH                     53\n",
              "27    SC                     43\n",
              "19    NC                     43\n",
              "2     AZ                     37\n",
              "14    LA                     28\n",
              "1     AR                     27\n",
              "17    MS                     21\n",
              "12    IN                     20\n",
              "6     DE                     16\n",
              "3     CA                     13\n",
              "11    IL                     12\n",
              "22    NV                     12\n",
              "31    UT                      7\n",
              "29    TN                      6\n",
              "33    WA                      5\n",
              "15    MD                      5\n",
              "26    PA                      3\n",
              "28    SD                      3\n",
              "13    KY                      3\n",
              "7     FE                      3\n",
              "20    NE                      3\n",
              "10    ID                      3\n",
              "18    MT                      3\n",
              "25    OR                      2\n",
              "5     CT                      1\n",
              "21    NM                      1\n",
              "4     CO                      1\n",
              "34    WY                      1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95cd9cd5-544d-4611-bbbe-c946d3705985\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Numero de Ejecuciones</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>TX</td>\n",
              "      <td>538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>OK</td>\n",
              "      <td>112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>VA</td>\n",
              "      <td>111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>FL</td>\n",
              "      <td>92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>MO</td>\n",
              "      <td>87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>GA</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AL</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>OH</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>SC</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>NC</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AZ</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>LA</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AR</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>MS</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>IN</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>DE</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CA</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>IL</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>NV</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>UT</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>TN</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>WA</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>MD</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>PA</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>SD</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>KY</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>FE</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>NE</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>ID</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>MT</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>OR</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>CT</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>NM</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CO</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>WY</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95cd9cd5-544d-4611-bbbe-c946d3705985')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95cd9cd5-544d-4611-bbbe-c946d3705985 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95cd9cd5-544d-4611-bbbe-c946d3705985');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b4663349-d588-4edb-a496-8bb3ab052655\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b4663349-d588-4edb-a496-8bb3ab052655')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b4663349-d588-4edb-a496-8bb3ab052655 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Estado\",\n  \"rows\": 35,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"FE\",\n          \"MS\",\n          \"SD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Numero de Ejecuciones\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92,\n        \"min\": 1,\n        \"max\": 538,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          13,\n          37,\n          538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#los 5 estados con mas ejecuciones\n",
        "labels=['MO','FL','VA','OK','TX']\n",
        "y=[87,92,111,112,538]\n",
        "plt.bar(labels,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "cL4I4Jkr3y9p",
        "outputId": "90e2f856-69aa-471f-d600-7260bef45f3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 5 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 108
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Definimos una variable que nos diga el metodo de las ejecuciones\n",
        "Met=df['Method']"
      ],
      "metadata": {
        "id": "rXyYNxyb4d4p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacemos una \"tabla\" de cuantos murieron por esto\n",
        "Met.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "s_7rgZ664ixK",
        "outputId": "651f4b25-b8ea-4aa7-b215-66c47514c9a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count                 1442\n",
              "unique                   5\n",
              "top       Lethal Injection\n",
              "freq                  1267\n",
              "Name: Method, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Method</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1442</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Lethal Injection</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1267</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Vemos si hay datos faltantes\n",
        "Met.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tbk0TTg56HCb",
        "outputId": "ab2e2bae-ea87-4472-a3a6-0d76490827c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Metodo=df.groupby('Method').size().reset_index(name='Numero de Ejecuciones')\n",
        "Metodo.sort_values('Numero de Ejecuciones',ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "r72asjuk4sOp",
        "outputId": "0997b8f9-7ea3-4aa8-9a8f-d832c2ab5b9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Method  Numero de Ejecuciones\n",
              "4  Lethal Injection                   1267\n",
              "0     Electrocution                    158\n",
              "2       Gas Chamber                     11\n",
              "1      Firing Squad                      3\n",
              "3           Hanging                      3"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7cd4873a-3823-4864-9dcf-175bf9f82a72\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Method</th>\n",
              "      <th>Numero de Ejecuciones</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Lethal Injection</td>\n",
              "      <td>1267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Electrocution</td>\n",
              "      <td>158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Gas Chamber</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Firing Squad</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Hanging</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7cd4873a-3823-4864-9dcf-175bf9f82a72')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7cd4873a-3823-4864-9dcf-175bf9f82a72 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7cd4873a-3823-4864-9dcf-175bf9f82a72');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0960045b-4e91-4bfd-a057-ad4108687a8c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0960045b-4e91-4bfd-a057-ad4108687a8c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0960045b-4e91-4bfd-a057-ad4108687a8c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Metodo\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Electrocution\",\n          \"Hanging\",\n          \"Gas Chamber\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Numero de Ejecuciones\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 551,\n        \"min\": 3,\n        \"max\": 1267,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          158,\n          3,\n          1267\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficamos con los metodos que hay en la base de datos\n",
        "metodos_labels=['Electrocutación','Fusilamiento','Cámara de gas', \"Ahorcamiento\" , \"Inyección letal\"]\n",
        "plt.pie(Metodo['Numero de Ejecuciones'])\n",
        "plt.title('Método de ejecución')\n",
        "plt.legend(labels=metodos_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 446
        },
        "id": "9nzh88qM5ln2",
        "outputId": "0bc49dc5-d77d-494f-e0b4-9931ff295f21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7b6da5a9d690>"
            ]
          },
          "metadata": {},
          "execution_count": 113
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGcCAYAAAA2+rwbAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABdS0lEQVR4nO3ddXQUVxsG8Gc1ycbd3Q0LENzdintxKZQChZZCobiUUqxQvEhx/YpDcXcNFiMhBjGSkGxsszvfHykDSxISIMmsvL9zciCj70r22bkzcy+PYRgGhBBCCAA+1wUQQghRHRQKhBBCWBQKhBBCWBQKhBBCWBQKhBBCWBQKhBBCWBQKhBBCWBQKhBBCWBQKBBcvXsTs2bORkZHBdSlERd29exezZs1CYmIi16WQCkahoOVevHiBzp07w9DQEMbGxpWyz/Pnz4PH4+H8+fMVup/NmzeDx+MhOjq6QvdTHB6Ph5kzZ1b6fj9Hac9TamoqOnfujLy8PFhbW1ducaTSUSioqbd/yDweD5cvXy4yn2EYODo6gsfjoUOHDsVuQyaToVevXhg0aBC+//77IvNXrVqFzZs3l3fpRI0wDIMBAwagcePGmDdvHtflkEpAoaDmdHV1sWPHjiLTL1y4gLi4OOjo6JS47uPHj9G7d28sXry42PkUCp8vJycH06ZN47qMMvn666+Rk5MDZ2fnIvMiIyPRsGFD/PXXX+DxeBxURyobhYKaa9euHfbu3YuCggKl6Tt27EBQUBBsbGxKXLdatWoYP348/bFXAF1dXQiFQq7LKBOBQABdXd1i3wceHh6YPHkyxGIxB5URLlAoqLk+ffogNTUVp06dYqfl5+dj37596Nu3b7HrKBQKLFu2DP7+/tDV1YW1tTVGjhyJtLQ0dhkXFxc8fvwYFy5cYJupmjRpws5//vw5evToATMzM0gkEtSpUwdHjx4tsq+4uDh07twZ+vr6sLKywvfff4+8vLxi69q7dy+CgoKgp6cHCwsL9O/fH/Hx8WV6Hh4/foxmzZpBT08PDg4OmDt3LhQKRbHLHj9+HA0bNoS+vj4MDQ3Rvn17PH78uEz7SU9Px/jx4+Ho6AgdHR14eHhg4cKFRfZV3DmF+Ph4DBkyBNbW1tDR0YG/vz82btxYZB+5ubmYOXMmvLy8oKurC1tbW3Tt2hWRkZEASj4nEx0dDR6PV+To7tmzZ+jZsycsLS2hp6cHb29vTJ06lZ1f0jmFVatWwd/fHzo6OrCzs8O3336L9PR0pWWaNGmCgIAAPHnyBE2bNoVEIoG9vT1+++230p9MopLU46sMKZGLiwvq1q2LnTt3om3btgAKP/QyMjLQu3dv/PHHH0XWGTlyJDZv3ozBgwdj7NixiIqKwsqVK3Hv3j1cuXIFIpEIy5Ytw3fffQcDAwP2A+TtScbExETUq1cP2dnZGDt2LMzNzbFlyxZ06tQJ+/btQ5cuXQAUNqE0b94cMTExGDt2LOzs7LB161acPXu2SE1v66lVqxYWLFiAxMRELF++HFeuXMG9e/dgYmJS4nPw6tUrNG3aFAUFBZg8eTL09fWxbt066OnpFVl269atGDhwIFq3bo2FCxciOzsbq1evRoMGDXDv3j24uLiUuJ/s7Gw0btwY8fHxGDlyJJycnHD16lVMmTIFL1++xLJly0pcNzExEXXq1AGPx8OYMWNgaWmJ48ePY+jQoXjz5g3Gjx8PAJDL5ejQoQPOnDmD3r17Y9y4ccjMzMSpU6fw6NEjuLu7l7iP4jx8+BANGzaESCTCiBEj4OLigsjISBw+fPij5whmzpyJWbNmoUWLFhg1ahRCQ0OxevVq3Lp1i32PvJWWloY2bdqga9eu6NmzJ/bt24effvoJgYGB7HuSqBGGqKVNmzYxAJhbt24xK1euZAwNDZns7GyGYRimR48eTNOmTRmGYRhnZ2emffv27HqXLl1iADDbt29X2t6JEyeKTPf392caN25cZN/jx49nADCXLl1ip2VmZjKurq6Mi4sLI5fLGYZhmGXLljEAmD179rDLSaVSxsPDgwHAnDt3jmEYhsnPz2esrKyYgIAAJicnh132yJEjDABm+vTpH30u3tZz48YNdlpSUhJjbGzMAGCioqLYGk1MTJjhw4crrf/q1SvG2Ni4yPQPzZkzh9HX12fCwsKUpk+ePJkRCARMTEwMOw0AM2PGDPb3oUOHMra2tkxKSorSur1792aMjY3Z127jxo0MAGbJkiVF9q9QKBiGYZhz584pPX9vRUVFMQCYTZs2sdMaNWrEGBoaMi9evCh2Wwzz7r309nlKSkpixGIx06pVK/a1ZBiGWblyJQOA2bhxIzutcePGDADm77//Zqfl5eUxNjY2TLdu3Yo8BqL6qPlIA/Ts2RM5OTk4cuQIMjMzceTIkRKbjvbu3QtjY2O0bNkSKSkp7E9QUBAMDAxw7ty5Uvd37Ngx1K5dGw0aNGCnGRgYYMSIEYiOjsaTJ0/Y5WxtbdG9e3d2OYlEghEjRiht7/bt20hKSsLo0aOhq6vLTm/fvj18fHyKbZb6sJ46deqgdu3a7DRLS0v069dPablTp04hPT0dffr0UXrsAoEAwcHBpT72vXv3omHDhjA1NVVav0WLFpDL5bh48WKx6zEMg/3796Njx45gGEZp3datWyMjIwN3794FAOzfvx8WFhb47rvvimznU8/9JCcn4+LFixgyZAicnJzKvK3Tp08jPz8f48ePB5//7iNi+PDhMDIyKvJ6GBgYoH///uzvYrEYtWvXxvPnzz+pXqIaqPlIA1haWqJFixbYsWMHsrOzIZfLlT6I3xceHo6MjAxYWVkVOz8pKanU/b148QLBwcFFpvv6+rLzAwIC8OLFC3h4eBT5APL29i6yveKmA4CPj0+xl9yWpZ4PtxceHg4AaNasWbHbMTIy+uh+wsPD8fDhQ1haWhY7v6TnLjk5Genp6Vi3bh3WrVv30XUjIyPh7e1dLiep334oBwQEfNJ6Jb0eYrEYbm5u7Py3HBwcirzGpqamePjw4aeWTFQAhYKG6Nu3L4YPH45Xr16hbdu2JbbBKxQKWFlZYfv27cXOL+kDTxO8PRm8devWYq/KKu2DWKFQoGXLlpg0aVKx8728vD663/79+2PgwIHFLlOlSpWP7vt9JX3Ll8vlZd5GeRIIBMVOZ2ikX7VEoaAhunTpgpEjR+L69evYvXt3icu5u7vj9OnTqF+/frEnYt9X0oePs7MzQkNDi0x/9uwZO//tv48ePQLDMErb+nDdt8uHhoYW+RYfGhpa7PXzH67/9ijgw3Xf9/YkrZWVFVq0aPHRbRbH3d0dWVlZn7yupaUlDA0NIZfLS13X3d0dN27cgEwmUzqZ+z5TU1MAKHIl0Iff4N3c3AAAjx49+qR633893m4DKLyqLSoq6rOeO6I+6JyChjAwMMDq1asxc+ZMdOzYscTlevbsCblcjjlz5hSZV1BQoPRBo6+vX+SDByi8N+LmzZu4du0aO00qlWLdunVwcXGBn58fu1xCQgL27dvHLpednV2kCaVmzZqwsrLCmjVrlC5XPX78OJ4+fYr27dt/9LG3a9cO169fx82bN9lpycnJRY6GWrduDSMjI8yfPx8ymazIdpKTkz+6n549e+LatWs4efJkkXnp6elF7hV5SyAQoFu3bti/f3+xH9Dv77dbt25ISUnBypUriyz39pu3s7MzBAJBkXMYq1atUvrd0tISjRo1wsaNGxETE1PstorTokULiMVi/PHHH0rL/fXXX8jIyCj19SBqjsOT3OQLvH/10cd8ePURwzDMyJEjGQBM27ZtmaVLlzIrV65kxo0bx9jZ2TF79+5llxs9ejTD4/GYOXPmMDt37mTOnDnDMEzh1TrW1taMsbEx88svvzBLly5lqlWrxvB4PObAgQPs+m+vNNLV1WV++uknZtmyZUxQUBBTpUqVIlfPvH08wcHBzLJly5gpU6YwEomEcXFxYdLS0j76GBMSEhhzc3PG1NSUmTlzJrNo0SLG09OT3c/bq2oYhmG2b9/O8Pl8JiAggJk7dy6zdu1aZurUqUy1atWYb7/99qP7kUqlTI0aNRihUMgMGzaMWb16NfP7778zAwcOZPT19Znk5GR2WXxw9dGrV68YZ2dnRiKRMOPGjWPWrl3LLFiwgOnRowdjamrKLldQUMA0adKEAcD07t2b+fPPP5nffvuNadWqFfPPP/+wy/Xu3ZsRCoXMhAkTmD///JNp27YtExQUVOTqo/v37zMGBgaMubk5M2XKFGbdunXMzz//zFStWrXIc//+8zRjxgwGANOqVStm5cqVzHfffccIBAKmVq1aTH5+Prtc48aNGX9//yLP1cCBAxlnZ+ePPp9ENVEoqKkvCQWGYZh169YxQUFBjJ6eHmNoaMgEBgYykyZNYhISEthlXr16xbRv354xNDRkAChdnhoZGcl0796dMTExYXR1dZnatWszR44cKbKfFy9eMJ06dWIkEgljYWHBjBs3jr389cNLKnfv3s1Ur16d0dHRYczMzJh+/foxcXFxZXo+Hj58yDRu3JjR1dVl7O3tmTlz5jB//fVXkQ87him8pLN169aMsbExo6ury7i7uzODBg1ibt++Xep+MjMzmSlTpjAeHh6MWCxmLCwsmHr16jG///670oflh6HAMAyTmJjIfPvtt4yjoyMjEokYGxsbpnnz5sy6deuUlsvOzmamTp3KuLq6sst1796diYyMZJdJTk5munXrxkgkEsbU1JQZOXIk8+jRoyKhwDAM8+jRI6ZLly7sa+Xt7c388ssv7PziQoFhCi9B9fHxYUQiEWNtbc2MGjWqSEBTKGgeHsPQ2SBCypNcLodQKMScOXPUpv8jQt6icwqElLOXL18CACwsLDiuhJBPR1cfEVKO9u3bh7///hs8Hg9NmzbluhxCPhmFAiHlaNKkSeDxePjrr7+KvRmPEFVH5xQIIYSw6JwCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQFoUCIYQQlpDrAggpb/m5BZDlyZGfU4D8XHnh7zmF/+bnFiCf/X/hMoyCgUDIh0BU+CP87/9CMR8CIR9C0fvzBBCI+dDVF8HARAd6RmLw+TyuHzIh5YZCgagduVyBzJRcpCdlIyMpBxnJOchILvx/5utcKORMpdXC4/MgMRRB30QH+iY6MDDThZG5Lows9GBsqQcjCz2IdASVVg8hX4rHMEzl/QUR8gkyknPw+qUUGUnZhR/8//2b+ToPjEJ93rZ6hiKYWElg4WQIa2dDWLkYwcRaAh6PjjCI6qFQICohL1uGxOg3SIz67yf6DXKzZFyXVWHEugJYOhvCytmo8MfFEEbmelyXRQiFAuGGND0P8eFpSAhLR0J4OtISswEtfyfqGYpg5fJfSDgbwtbDBDp61MJLKheFAqkUuVIZXjxKRXxYYRBkJOdwXZLK4wt4sPUwhkugBVyqWMDESsJ1SUQLUCiQCpP9Jh/P7yfj+b0kxIemQ6FG5wFUkYm1BC5VLOASaA5bDxO66olUCAoFUq4yX+fi+b1kRN5LwqvIDNC7q2LoSIRw8jeHSxVzOPubQ0ci4rokoiEoFMgXy0jORuTdZETeS0bSizdaf26gsvH5PNi4G8O9hhW8g60pIMgXoVAgnyUrLRfPrr1ExN1kpMZlcV0O+Y9QxId7DSv4NbCDnacJ1+UQNUShQD5JXGgaQs7HIepBilrdK6CNTG0k8GtgB+86NtAzEHNdDlETFAqkVLI8OUKvv0TIhXi8TpByXQ75RHwhD27VLOHfwA723qZ00xz5KAoFUqL0xGyEnI/Ds+uvkJ9TwHU5pBwYW+rBt74tfOvZQWJERw+kKAoFooRRMIh+lIqQ83GIffqaThprKL6AB48gKwS1cYGZnT7X5RAVQqFAAAAF+XI8uhiPkPNxeJOSy3U5pLLwALdqlqjZ1gWWToZcV0NUAIWCllPIFXhy5SVuH42CNCOf63IIh5z8zVCzrQtsPUy4LoVwiEJBSzEMg/Dbibh5KIq6nCBKHH1NEdzJHdauRlyXQjhAoaCFokNScOPQc6TE0v0FpGQuVSwQ3MkNFg4GXJdCKhGFghZJiEjH9X8i8TIig+tSiLrgAR5BVgju6AYTa+qQTxtQKGiBlLhMXP/nOV48SuW6FKKm+AIeqrVwQs32LhCJaSQ5TUahoMGy0nJx9UAkwm8n0qWlpFwYmumiYS9PuFa15LoUUkEoFDSQQsEg5Fwcbhx+DlmunOtyiAZyqWKBhr08abQ4DUShoGGSXrzB+e2hSI7J5LoUouGEYj5qtnNBtZZOEAj4XJdDygmFgobIzy3AjYPPEXIhnjqqI5XK1FYfjft4wd7LlOtSSDmgUNAAsU9f49zWZ8h8TXciE+54B9ugXjcP6lNJzVEoqLH83AJc2ReBJ5cTuC6FEACFI8LV6+YBv/p2XJdCPhOFgpqKeZKKc9ueIet1HtelEFKER00rNO3nA7GekOtSyCeiUFAzBTI5Lu8Jx+NLdHRAVJuRpR5aD/OHlTN1l6FOKBTUyJuUHBxfG0LdUxC1wRfwULeLO6o2d6TBfdQEhYKaiH6YgtObnyAvmwa7IerHOdAcLQb6QddAxHUppBQUCiqOUTC4ceg57px8QXclE7Wmb6KDVkP9YOdJl66qMgoFFZaTmY9//3qMuGdpXJdCSLng8Xmo1d4FNdu6gMen5iRVRKGgol49z8DJ9Y+QlUZXFxHNY+9tgpZD/KFvrMN1KeQDFAoq6OG5WFzZFwGFnF4aorn0jMTo8G0VujpJxVAoqBBZnhzntj1D+K1ErkshpFIIdQRoPcwfLoEWXJdC/kOhoCKk6Xk4vOI+UuOlXJdCSKXi8Xlo3McL/g3tuS6FgEJBJaQnZePQ8vvITKW+i4j2CmrrjDpfuXNdhtajUOBYcmwmDv9xHzmZMq5LIYRz3nVs0PRrH+qKm0MUChxKCE/D0VUhyM+hG9IIecvBxxRtRwZSv0kcoVDgSNSDZJzc8BhymYLrUghROeb2BugwpioMTOmS1cpGocCBZ9de4tzWZ1DQYDiElMjAVAcdxlSFub0B16VoFQqFSnb/dAyu7I+gLisIKQOxnhDtR1eBnacJ16VoDQqFSnTtf5G4e/IF12UQolZEOgJ0/K4qbD1MuC5FK1AoVAJGweD8zlA8oTEQCPksIl0BOo2tBhs3Y65L0Xh03VcluLgrjAKBkC8gy5Xj8IoHSIx+w3UpGo9CoYLdPPwcjy7Gc10GIWovP6cAh/+4j+SYTK5L0WgUChUo5Hwcbh2N5roMQjRGgUyB2KWrkRsWxnUpGotCoYJE3EnCpd30xiWkvIh0+KiVdRx6xzfhxdQpiM2M5bokjUShUAFin73GqU2PQafwCSkfYl0BaqX8D5JrhwA3J0xpnYoR/45ASk4K16VpHAqFcpb04g2Orw6BooASgZDyoKsvRM2E7dC98y8Ufh4Y1z0T4aJUxGXFYdTpUZDKqGfh8kShUI7SE7NxZOUDyPLkXJdCiEaQGAhR8/lG6D68hIIafhjVMREvBe9OND97/Qzjz42HTEEdSpYXCoVyIk3Pw6Hl1NspIeXFwFiIGk//hPjpDeTUr4phLaOQxs8pstz1l9cx8+rMyi9QQ1EolINcqQyH/riPzNc0HgIh5cHIVITq95ZAHPkQ6S2CMLThU2TzS/7CdSjyELY+/KsSK9RcFApfSCFX4PiaELxOoHZNQsqDibkI1a8vgCgmFK861MLImg9QwPt4b8KBRm5oe+o34PH/KqlKzUWh8IWu7ItAQng612UQohHMLYWoemEWBC+jENGjNsYG3gPD+/g6rU39senxdVhkvsKLm4fxOCGjcorVUBQKXyD0xis8PBfHdRmEaARLawEC/50KQWoC7vevhZ897pa6zkjjQCy6ewLigjxccByFxqHdMHLrHaRJ8yuhYs1EofCZkmMzcX7bM67LIEQj2Njw4X90MvjSdFwcUh3zHe99dHkxX4wFOh4Yc/8oINbHSqvZGBjeEAAQl5aDMTvvQk7jlXwWCoXPkCuV4cTaEBTQqGmEfDF7O8Dnnx8gKMjFkWH+WGn18KPLm+mY4K98Q3R4dhYFRk4YKf4Vi2PclZa5EpGKX48/rciyNRYNgvqJGIbB6U1P8CaFrjQi5Es52Sngvu9H8MUCbBvsioMGjz+6vIeBI1bEx8LhdQwyrOvgq6QRiM7RLXbZ9ZeiEOhggk5V7SqidI1FRwqf6N6/MXjxKJXrMghRe652Mrjv/h58fV2sHmqLgwbhH12+vokPtoaHwOF1DEIde6J27JgSA+Gtn/Y9RGRyVnmWrfEoFD7Bq+cZuHHwOddlEKL2PGxz4LLze/AtzPDbYCOclUR/dPneplXw5/0z0M/PxkH7iWgd3hl5itI/vnJkckzYfR8FcmrqLSsKhTLKlcrw74bHUNDJK0K+iLfNGzjt/AF8J3v88jUft3RKHoBKwBNgioEvpt49Ap6uMeaYzsO4yKBP2t+DuAz8eS7yS8vWGhQKZXT276d0xzIhX8jPKgX2u6aA8XbDxF65eCYquZdTA5E+VvJs0DfkJPJMvdGHmY+N8Y6ftd+V58IREkf3L5QFhUIZPLoQh6gH1EUvIV8i0DweNntmQF7VG992TkWMIL3EZe0l1tiaoUCDyGtIsmuOhq9/xo10o8/et0zOYMKe+8iVUWeVpaFQKEVWWi6u/o8OPQn5bDygqvFzWO6fj7zgQIxoE4cUfsndwlQ1csf2F9HwSAzFHcfBqBs1GEl5oi8uIzwpC4tOhn7xdjQdhUIpLuwMgyyXvl0Q8jl4PKCG5AnMDy5GZpPqGNo0DJn8vBKXb2cagI2PrsIsNwubbX9Bt/CWkDPl9zG18UoUrkXS1YMfQ6HwEeG3ExH9kJqNCPkcfD4PQaI7MDn6J1La1sSwOiHI5xX/BYsHHkYbBWDh3WMQ6Jlhov4CzIzyLfeaGAb4Ye8DZOUVlPu2NQWFQglypTJc2vPx66YJIcUTCHmoyVyB0b8bEdOlNkZXu19ix3Y6Ah38JnbFqAfHILWshg65c3Ag0arCaotPz8GsQx+/SU6bUSiU4OqBCOS8oU61CPlUQjEftXJOw+D8DjzuWxs/+JTcsZ25jik25krQJvQ8Yhw6os7LCXiaJanwGvfeicOpJ4kVvh91RKFQjPjQNDy98pLrMghRO2JdAWqlH4bk+kFcHxSEWc4lB4KngRN2Jr5GYHwIzjp+i0YRfZBZUHk970w58BCvqTfVIigUPlAgk+Pcdur9lJBPpSMRoOarPZDcP41/hwZiic39EpdtaOKLrWEPYJOdjuWWszEkvH7lFfqflKx8LDlFVyN9iELhA7ePRiMjqeg4sISQkukZCFEregv0wq5jz3BPbDB/VOKy/U0CseL+aYh1zTFMuADLYtwqsVJlO2/GIiwxk7P9qyIKhfekxmfh3qkYrssgRK3oGwkRFLoWOvGPsWG4A/YaFf/tW8gT4hd9H/x07ygyrYPR/M10nEk1q+RqlckVDOYcecJpDaqGQuE/jILB2a3PoJBT30aElJWhiQhBD5ZDJz0GS4eY46Sk+A4jDUUG+BNW6PnoXzxx7IPgmNGIKaWH08pyKTwF554lcV2GyqBQ+M/Tqy+RFP2G6zIIURvGZiJUv/UbRPJ0zB4gxlXd2GKXc5DYYFu6DHWj7+CA/Y9oF96xTD2cVqa5R59QT6r/Ua1XhiNymQK3jkZxXQYhasPMQohql+dCqCvDT31kCBEX/027hrEHdkRHwiXzNWaazMeEyOqVXGnZRCZLse36C67LUAkUCgAeXYxHVlrJt94TQt6xsBIi8Ox08Cx1MLZbBp4L04pdrqNpIDaEXIaejhV6KuZjS4J9JVf6aZadCUdGtozrMjin9aGQn1uAOyeiuS6DELVgbSNAwPEpULhZYGSHl3glKDqqGQ88fGcUgPl3j+K1dSM0TJmM2xmGHFT7adKzZVh+hnox0PpQeHg2FjmZ9O2AkNLY2fLge/AH5FZ1wtAWkcjgFx1fRFegg9/Fzhjx4BhuOg5FnajBSM7/8h5OK8vW69F4ruXDd2p1KORKZbh3qviTY4SQdxztGHjvn4A3DbwxrMET5PKKdihnoWOGTTm6aPn8Nv6ynY6e4c3BlNThkYqSyRnMP/aU6zI4pdWhcO/fGOTnUG+JhHyMi10B3PdMwMs2VTCi5gMU8IpepeNt6Iydr1Lg8+Y1xkvmY06UDweVlo/TT5NwJUJ7e0fW2lDIfpOPh+foKIGQj3G3y4Xr7omI6FoN4/2L78eoiakv/g69BwORFdplz8bBCuzhtLJo87kFrQ2F28eiUZBP1yUTUhIv2yw47Z6Eu/2qY5p78YEw0KQKlt87hSTL5gh++T3CpHqVXGXFuBn1Gvdj07kugxNaGQpvUnPw+HI812UQorJ8rV/DYe9UnB9cFQvt7xWZL+QLMUPijYn3j+OM/Rg0iegFaYGAg0orztoL2jkMb+X1U6tCbh2NhqKAurMgpDgBFi9hffB3/DPcF9tNHhaZbyQ2xJJ8CWpH3MBiizlYGeFS+UVWgpOPXyE6RQoXC32uS6lUWnekkJGcjdDrr7gugxCVVMUkGtYnl2HrcFdsNyl6FY6TxBbbXueieloqBgkXYGWsS+UXWUkUDLD+UvF9OWkyrQuFkAvxYBR0lEDI+3g8oLpBKCwvbsCfQ61xyKDoidaaxp7YERUGY4Etmqb/ggupphxUWrn23YlDapZ29XagVaFQkC/Hs6s0ohoh7+Pzeaih8wBmd3bj18EGOK9XtA+gzqaBWPfwImLN2yE4ZhTic3U4qLTy5RUosOVqNNdlVCqtCoWwW4nIy6b7Egh5iy/gIYh3DSbPjmNaPx7uiJW/NPHAw/eG/pj94BT+ZzsBHcLbQ6ZQrxvSvtTW6y+Qky/nuoxKo1Wh8OgCXXFEyFtCER+18s/BIP4qvu+RjVCR8g1begJdLBU6YVDELUwzmo9JkVU5qpRbadky7L6lPYNvaU0ovHqegeQYGnaPEAAQ6fBR681R6GQ+wuivkhEnzFCab6Vrgc3ZItR7/Rrd5fOx/aUdR5Wqhg2XoyDXknORWhMKIRfiuC6BEJUg1hOgVvJ+8PgxGNHmBVL52UrzfQ1dsCPhJUx5DmiQPAl3Mww4qlR1xKXl4GiIdpyPLNf7FORyOWQy1etxNFeaj/iIVOgaa00Gai4GyMtSgKGb0T+Lrr4QQTHbkGcpxejaocjnKbeVNzf1w/zHl3Hfqi/6RTRWuw7tKtLGy1HoVFXzj5h4DMN88TERwzB49eoV0tPTy6Gk8pefU0AnmDUEAyBPWoBnJ7Mgy9aOw/nyIjEUokbYBqR7AN8F3sOHn/dDTAIx7vEFbDD7AfOjvbgpUsWd+r4RPK1Vf2yIL1EuofDy5Uukp6fDysoKEokEPJ7qfLtgGAbpidlQyOkDRBMwYPA6IwkJz94g8mIO1+WoDQNjEao//ANxNST4yUu5HyMhX4jpOm7oGPsUY/ETjiVbcFSl6hvZyA1T2vlyXUaF+uLmI7lczgaCubl5edRUrvKyZRDwRBBoZYcemsnY0AzZDnkQ6uaiIJfCvjTGZiJUvbUYTxsbY46jciCYiI2xJFcHPpnpaJs9G+Ea0qFdRfnfvXhMauMDAV91vviWty9uZH97DkEikXxxMRWBRlXTPEK+EDw+D0Idzf3DLC+mFiJUu74AN1oaFAkEF317bE/NgrnCCXXix1MglEFSZh4uhiVzXUaFKrczr6rUZPSWvECB/Fw6l6B5eFC9d5vqsbASourlufi3oxGWWz9Qmhds7IVtUWF4rNsJzcK7QyqnizDKat8dzb6SUaPfCXnZdJSgarbt2oILl89xXYbGs7IWIPDSXOztbohNZo+V5nUzDcSqsAdYI/kBoyKCOapQfZ16mog3uZr72aLRoZAr/bKjBGsXYxw7eaScqtEOu/Zuh2egU7HzDhzch782r0ONqkGVXJV2sbXlI+DSXPzVQw/7DUPZ6XweHz8Y+uPn56EYgtlYHevMYZXqK79AgZOPNLen5Qo9/eoy+WhFbl5J9K/tlX6XFyhQUEp/JWMnjsLu/TuKTG/aqDl2/X2gXOsDCkNm09rtaNe6Q7lv+1PFxL5ArYZVcOboJQT4Vym37X7VsSuaN21VZHpEZDiW/LEQe7b9A0NDo3LbH1HmYAd4XZyPxb0FuKHzrttniVCChYwFApOz0Th9Gl7mijmsUv0defgSPWo6cl1GhdDYa3JypWU7vGvWuAWWL1qlNE2sw90fTH5+PsRi9f2D1dPVg55u0ROWHu6euHzmFgcVaQ9nOzncri3BrF5yPH6vYzsbPUusfJ2DPJErake3hpzR6AaCSnElIgVp0nyY6qvv32pJNPbdUdab1cRiHVhZWSv9mBgX3098fEIchn87EJ6BTvCu6owBw/ogJla5m+Ede7aiUctgOHpZIrCWF6ZM/wEAULN+IABg8Mh+sHYxZn9ftHQBmrVtgG27tqBmg0A4eRcOeh4XH4sBw/rA1c8O7gEOGP7tQCQlJynt6+Tp42jdqQmcvKzgW90Vg0b0Y+cV1/TlGeiEXXu3AwBqNSw8OmjeviGsXYzRpVfhkda9B3fQo/9X8K3uCo9AR3Tu2Q4PH91X2k5GRjp+mDIO/jU94ORlhUat6uDfMycAFN98tHnrBtRuVBUOnhao1ywIew/sUppv7WKMbbu2YNCIfnDxsUGdJtVx4tSxYl8DUjw3u3y43VmOn7pn4bH43fskwMgVOxKScZf/FTqFt6VAKCcFCgbHNbQJSSPfIWVpOvpUMpkMvQd0hb6+AQ7uPY7D+/+Fvr4++gzshvz8fACFH35TfvkB/fsMwvkT1/D3hp1wcXYDAJw4VHhydfmiVQi5Gcb+DgBRL57j6PFD2LRmG84cuwyFQoGBw/sgPSMN/+w+ij1b/8GLmGiMHDOYXefU2ZMYPLIfmjdphdPHLmHf9kOoXrVGmR/PiYNnAQB7tx9EyM0wbFy7FQCQJc1Cr259cWjvSRz732m4urqh76AeyMoq7ExQoVCgz6DuuHnnBlYtXYeLp29g2k8zIeAXPz7vsROHMW32ZIwaPgYXTl7HgL6DMe7H0bh89aLScouXL0Sn9l1w7sQVNG/SCqPHD0da+usyPx5t5mkrheOjNfiucwqihens9Fam/tgQHYXFvHGY8jyQuwI11OEHCVyXUCE0svnoU7q0OHX2BFz9lPszGfftBIz/9gelaQePHIBCocDShSvZy2+XL1oFrypOuHr9Epo0ao6lK3/HN8PHYMSQUex61f87qWphXniXqJGRMaysrJW2LZPlY8WStewyFy6dxdPQJ7h16SHs7RwAACuWrEWjlsG49+AOqlcNwrKVv6Nzx26YNOFndjv+fmX/wzc3K9yXmYmZUj0N6zVWWm7xgj/gWcUJV29cQavmbXDx8jnce3AHl0/fgrubBwDAxcm1xP2sWr8Cvbr3xeCvhwMA3N3G4M69W1i9fgUa1GvELtere190/ao7AODnSdOxYfMa3Lt/F82atCjzY9JGPjbpsIjciW/axSODl8tOH24ciKExMeiTMw0P31CHdhXhRlQqXkvzYaZhTUgaGQr5OWUPhfp1G+K3uUuUppmYFG0+evw0BFEvnsPN315pem5eLqJfRCE5JRmvEl8W+VAtCwd7RzYQACAsIgx2tvZsIACAt6cPjI2MER4RhupVg/D4SQj69x74yfsqTVJyEn5dPAdXr19GSmoK5HI5cnKyEZ8QCwB49CQEdrb2bCCUJjwiFF/3GaQ0rVZQHazftFppmp+PP/t/fYk+DA2NkJKq2TcJfSl/yyQYJBzC0GbhyPuvYzsRX4RZYmfUSFagXuKPyJBp5J+4SlAwwNXIFHSoolmd5GncO0ahYJCfV/ZQkOjpw9XFvdTlpFIpqgRUw+rl64vMMzezAJ//+S1xEj39T15HV1f3o/N5PB7wQbdWsoLST76PnfgN0tJfY+6MhXCwd4SOWIz2XVsiP1/2334r5q5XoVCk9DsPPCgU1BVqSaqYxYL35jSG1X8EOQpfZ1OxMZbmiJCd74X6kY1K2QIpD1ciUjUuFDTunEJ+TgFQAd3hBAZURVR0JCzMLeHq4q70Y2RkDAMDQzg6OOHS1QslbkMkEkGhKP1ch5eHFxJexiM+4d2dk6Hhz5DxJgNent4AAF+fgI/uy9zcAonJ706EPY+KRE7Ou37z317hJP+gnpt3bmDYoG/Qomkr+Hj5QizWQerrVHa+n48/El7GI/J5RKmPAwA8Pbxx8851pWm37lyHl6dPmdYnH+AB1YzCkas4i1E17rOB4GbggK3pBbiR9xW+DqdAqCxXIlJKX0jNaGYofMry+XlISkpU+nn/Q/Ctbp17wszMHAOG98X1m1fxIjYaV65dws8zJyHhZeEwnz+On4I161di/aY1eB4ViYeP7mPD5rXsNhwdnHDpygUkJSUiPSOtxJoaNWgKX28/jB4/HA8f3cfd+3fw3YSRqBfcANWqFJ5M/mHcT/jfoX34bcl8hEWE4smzx1ixeim7jQZ1G2HjlvUIefQA9x/exY9Tx0Mkevdt3MLcEnq6ejh74TSSkpPw5k3hyFtuLm7Y+79dCIsIxZ17tzF6/HClS0zr1WmAOrXrY8ior3Hh0lm8iI3GmXOncPb86WIfy+gRY7F73w5s3roBz6MisWbDShw9cRijh39XlpeHvIfHB4J0Q5AkuYoJvu/6Mapn4o2NL9OxIHs0fnvhyWGF2ifmdTZiX2eXvqAa0fpQOHvhNAJreyn9dOreushyEj0JDu4+Dgc7Bwz5pj8aNq+N738ag7y8XBgaFPav3qt7X8yZvgCbt25Ao1bB6D+kF55HR7LbmDl1Hi5cPofq9fzQol3J3+Z4PB62rN8JYyMTfNWzHXr0/wrOTi5Yu3ITu0z9ug2xYdUWnDx9DM3bNUD3vh1x78Eddv6safNgZ2uPTj3bYtS4YRg9fCz0dN91WigUCjF35kJs3bEZVYO9MXB4XwDA0oUrkZGRjpbtG2HMhBEYNmgkLMwtlerbuOZvVKtSA9+MHYpGLYIx+9fpRY443mrXugPmTv8Vq9avQKNWwfh7xyYsX7QK9es2/NjLQj7AF/BQU3gHYda3Md31XSD0Mg3E/JeZ6PH6B5xIVr1eirWBph0tfPF4Crm5uYiKioKrq2up7dwVrUAmx+sEKac1kIonK8hH/MtYhBzOQG6G5p93EIj4CJJfxg33J1hrEVI4jSfAjxIv1M4wRKfnXyFHXvwlwaTidahii5V9y345uKrTqBPNsrzyvTeBEK4JxXwE5Z/Bv36h2Gn8FACg/1+XFZnp/mgZUZPjCsm1yFQwDKOSPUV/Do1qPqJQIJpErCtAzdwT2Bf4iA0EOz0rbM41xKX0jhhDgaASUqX5ePoyk+syyg2FAiEqSFciQJD0MP4KCsFRg8IrvaoYueOvdAFmpQzBhjjN7IxNXV2N1JzzChoTCgq5AnKZ5rcvE80nMRCi+pv/YWntB7ikGwMAaGsagIWvRegePwrX0ow5rpB86LIGnWzWmHMKsnwKBKL+DIyFCEzbh7l1HiJcVHhp9CjjQNRJtkTjiBbUoZ2Kuhn1GjK5AiKB+r8+6v8I/kNNR0TdGZmKEJCxG5Pr3Ea4KBU6Ah3M1/WGYWI1dA1vRYGgwrLz5XgQm851GeVCY95lFApEnZmYi+CTuQvfB9/CS0EmzHRMsQoOuPCyHX6J8i99A4Rzj+IzuC6hXGhE8xHDMCigUCBqytxSCOfMnRgTdB3ZfBk8DByxIEuCiXE98Tjz0/vFItwITcziuoRyoRGhUCBT4AvvwSOEE5bWAtjk7MToaldRwFOggYkPxqQZoUdEJ2QWaMSfp9YIffWG6xLKhUY0H6la09HYiaPYbiMAoEuv9pg2a3KF77ey9kPKh40NH6bynRjjdxkFPAX6mFZB91RPtH/WlQJBDYXTkUIZzKycS+ckALIGx37yemMnjsLu/TuKTL9+/m6ZutMuydwZv3Jy5LJx7VaIPuiC+kuNnTgKGW8ysGV90eeJfD57Wx7A24EJntcg5Akx0cAPafHBGPri8993hFuZeQWIS8uGg6mk9IVVmNZ/HWnWuAWWL1qlNM38vQFvPoeRETfXkZuamHGyX/JpnOwYvBFvx6+2N2EoMsBsgTt2P2+NUyn0+qm7sMRMtQ8FjWg++hJisQ6srKyVfr6fNEap+QcAps2azA5uDwCHj/2Dxq3rwtnbGj7VXNC9XydIsws74/uw+ehDew/sQquOjeHmb4+Amp74ZuxQJKe8G2XsyrVLsHYxxrkLp9G8XQM4e1uja58OSE5Jxplzp9CgeS24Bzjgm7FDkf3eGAkfNh/l5eVh5rypqBrsAxdfW7T5qhmuXLvEzt+1dzs8A51w7sJpNGheC65+dug9oCsSkwrHYVi0dAF279+BE6eOwtrFGNYuxuz6T549Rtc+HdjHP3HKWEilmnH4XJFc7AsQp78Fv9rehL3EGkvgg9nPulAgaIhnr9S/uwutD4XPkZj0Ct+MHYo+Pfrj0umbOLDrKNq36VhkpLOSyApk+GnCNJw9fhmb1+1AbFwMxv0wqshyi5b9igWzf8eR/f8i4WU8Rnw7COs2rsLq5RuwfeMeXLh0Fn+9N17Dh6bM+AG3797C2hUbcf7EFXRq3xl9BnbD86h33Xnn5GZj1foVWLl0LQ7uOYb4hDjMnDcNADB6xHfo1L4LmjVugZCbYQi5GYZaQcGQZkvRe0BXmBib4MShc1i/agsuXj6PKdN//MRnUru4OeThieFGrLK4h+rGHpiWE4iBj7oiJofb3oVJ+QnTgFDQ+uajU2dPwNXv3XB6zZu0KHV4zMSkVygoKED7Nh3h6OAEQHmM4dL07fk1+38XJ1fMm7kQrTs1hVSaBX39d4OsT/5hGmrXrMOuM++3Wbhx8T5cnFwBAB3afoUr1y7hu1HfF9lHXHwsdu3djrtXH8PG2hZA4YA3Zy+cxs692zB10gwAgEwmw6J5S+Hi7AYAGDJwOBYv/w0AoK9vAD1dPeTn58PKyprd9u79O5CXl4sVS9ZCX1L4XC2Y/Tu+HtoL0ybPgpWlVZmfC23h4SDFJdNNOGgQjvamVVA92Q/9w6txXRYpZ5pwpKD1oVC/bkP8NncJ+7tEoo95C2d9dB1/30A0rN8YTdrUQ9NGzdC4YTN0bPcVTIxNy7TPByH3sGjZr3jy9BHSM9LZsYjjEuLg/d4wlX4+Aez/LS2soKcnYQPh7bT3B9Z539PQJ5DL5ajbNEhpen5+ntK5Bz09CRsIAGBtaYOU1GR8THhEGPx8A9lAAIDaQcFQKBSIfB5OofABL8d0HDHbhHOSFxhpEoTUF3XxU7wD12WRCvA8WYoCuQJCNe7uQutDQaKnX+RKIx6fX+TqoYL3Br0XCATYu+0gbt25gfMXz+KvLeuw4Pc5OP7PGTg7unx0f2+bXpo0ao5Vy9bD3MwC8Qmx6DWgK2T5+UrLioTvXh4ej1fkyiIejweFovgmK6k0CwKBAKcOX4DggzeovuTd0UiRq5V4PLrnoxx5OyZjh+VGhEhSMV0vGHueNsPNdCOuyyIVJF+uQFSKFJ7WhlyX8tnUN84qkIWZudKg9wDw6EmI0u88Hg+1a9bBpAk/48zRSxCLxDh+8kip246IDMPrtNeY9tNM1KldD54eXkhJLf8eFgP9q0IulyMlNRmuLu5KP+83BZVGJBYVGWrT08MLT56GsCfWAeDmnRvg8/lwd6MxggEAPMDHMQHrrdciyigXs0T1sPBBewoELRCaqN5NSBQKxWhQrxEePLyHPft34nlUJH5bMh/Pwp6y8+/cu41lf/6O+w/vIi4+FkdPHELq6xR4unuXum17O0eIxWL8tWUtomOicOLUMSxZ8Vu5PwZ3Nw9069wTYyaMxNETh/AiNhp379/B8j8X49TZk2XejqODE54+e4yIyHCkvk6FTCZDt849oaOji7ETv8HT0Ce4fPUifp7xI3p06U1NRwB4PMDHMQZLbNdCbibBdwWN8e39VkjOL997SIhqik5R7yGBKRSK0bRxC0z4bhJmL5iO1p2aIkuahR5de7PzDQ0Ncf3GVfQd3AP1mgbh18VzMXPqPDRv2rLUbVuYW2D5otU4dPQfNGoRjBWrl2LGz3Mr5HEsX7QKPbv2wYy5U1G/WU0MGtEX9x/ehb1d2duz+/ceBHc3D7Tq1AR+Ndxw8/Z1SPQk2PX3AaSlp6FNp6YYNnoAGtZvjAWzF1XI41AnfD4PXs6RmGu7Bi4WDmiU2gITHgWDYTRjqEZSupSs/NIXUmE85gsbkHNzcxEVFQVXV1fo6lbupXUKBYOUWPU+VCOfTlaQj/iXsQg5nIHcDNUZR0Mg5MHV8QlmWW1CO4tqSI5sgIOvLLkui1SyjlXtsKJPda7L+GxqfaJZXqA6HwhEuwnFfDg4PsAMq60YbFIX/3vQCM+y1PvOVvJ5UrPyuC7hi6h1KCgoFIgKEOnwYel8Cwtt/sFocQssvFUP0gIB12URjqSqefORWocCHSkQrunoCaDvehkbbC+gT15HTL8dyHVJhGMpdKTAHYYygXBIT18Ixu00jts/QfVXXbEw2pHrkogKSMvOh0LBgM9Xz4sL1DoUSrpxi5CKJjES4o3bEcTYp6LgWRdsSzXhuiSiIhQM8Do7HxYGOlyX8lnUOhTozlvCBQMTEeLd94GxFuLGnfaIy1XPP35ScVKzKBQ4Qc1HpLIZmYsQ4bYDBia22HC9OvIUdKsPKarwCiT17OpCvUOBjhRIJTKxEiHUYwfA88Wft2iENFKyFKn6XoGk3qFA5xRIJTG1FSLUcxdepgXjVCzdkEY+Tp3vVVDrY9/KPlC4c+821m9aQ0coWsbMQYgIn4O4EdOYAoGUiTrfq1ChRwqBWyrvmu0zTa5U6PaTU5Ix8rvB+OP31eDx1PNSs/ctWroAx/89irPHL3NdikozdxbgucdZHAhphPR8tT6wJpUoRyYvfSEVpdZHCl8qKSkRU2b8iFoNq8DRyxLV6/qh/9BeuHjlvNJyDMNg3A+j8POPM1CvTgNuiiWVztydh8fOd7H+bk0KBPJJ5GrctK217/SY2Bfo2L01jI2MMePnOfD19oesQIbzF89gyi8/4MrZ2+yyPB4POzbv47DawmCSy+UQCrX2JatUFl7AeePnOP7Qi+tSiBpS51DQ2iOFyb9MBI/Hw/GDZ9Gh7Vdwd/OAj5cvvhk2Bsf+d5pdbs2GlWjcui5cfG1Rva4ffpo2AVJpFjt/197t8Ax0wr9nTqBesyC4+Nhg6KivkZ2Tjd37dqBm/UB4VXHCzzMnQS5/d0i598AutOrYGG7+9gio6Ylvxg5Fcsq7YTCvXLsEaxdjnDl3Ci07NIKjlyVu3LqG6BfPMWBYH/jX9ICrnx1ad2qCC5fPlfp4/1i1BP41PeDmb4/xk75Fbl5ukWW27dqCBs1rwcnLCvWb1cSmres/us2srEyMGjcMLr62CKzlhTUb/kSXXu0xbdbkMj/O9Iw0jBo3DH413ODsbY06Tapj555tpT6eimTmy8NO3iscD7fhtA6ivgooFNRLWvprnL1wGoO/HqY0zvBbxsYm7P95PD7mzViIi/9ex4rFa3D1+mXMXjBdafmc3Gxs2LwGa//YiJ1b9uPq9csYPKIfTp/7F9s378XKpeuwdccmHD72D7uOrECGnyZMw9njl7F53Q7ExsVg3A+jitQyd+FMTPtpJi6fvgk/X39IpVK0aNoS+7Yfwpmjl9C0cQsMGNobcfGxJT7eg0cO4Pdlv+LnH6fj30PnYW1lg83b/lJaZt8/e/DbkvmY8uMvuHTmJn6eNB0LF8/D7n07Stzu9Lk/49btG/h7w07s2fYPbty6ioePHygtU9rjXLh4HsLCn2HH5n24dPomFs5dAjMz8xL3WdGMAwRYmpGO+4nGnNVA1J9cob43UWllW0RUdBQYhoGne+lNAyOHjmb/7+TojJ8mTsWPP4/HwrlL2OkymQy/zV0CF2c3AECHtl9h7/924/HtcOjrG8Db0wf16zTElWuX0LljNwBA355fs+u7OLli3syFaN2pKaTSLOjrvxtDedKEn9G4YTP2d1MTM/j7vTuBP3niNBw7eQQnTx/H0IEjin0M6zauRt9eX6NfrwEAgCk//IKLl88jL+/dZXOLls7HzKnz0L5NJwCAs6MLQsND8feOTejVvW+RbWZlZWLP/p1YvXwDGtVvAqBwUJ8qwT5Ky5X2OOMS4hDgXxXVqtRgn2OuiAP0MPtlCvLlYs5qIJpBnY8UtDIUPuWS0lNnT2LpikUIiwhFZuYbdnp2TjYkeoX95evpSdhAAABLCys4OTgpfbhbWlghJfVds8mDkHtYtOxXPHn6COkZ6VD8980iLiEO3p7vPlirVVEerEMqzcKiZQtw+uy/SExKRIG8ALm5OYhPKPlIITwiFAP7DVGaVrNGbVy5dqlwm9lSRL+IwoSfxmDilLHsMvKCAhgaFT+m8IuYaMhkMlSvGsROMzIyhoebh9JypT3OQf2GYuiorxHy6AGaNGqKtq06oFZQcImPpaLw+TyIU3iYKrIEaNRM8oXsoMd1CZ9NK0PBzdUNPB4P4ZFhH13uRWw0hnzTH1MnzUT3Lr1gZmqGcxfOoO/g7pDl5wP/hYJIqPwpwuPxICxm2tsO/KTZUvQe0BVNGjXHqmXrYW5mgfiEWPQa0LVwu+95GzxvzZw3DRcun8PMn+fCxcUNerq6GDpqIPLzZZ/1XACAVFo4puzvv/6BoGpBSvP4gs8fF6Asj7N505a4feURzpz7Fxcun0P3vp0weMAwzJw677P3+zkUCgZZr7IrdZ9Ec/Hd1Lf5USvPKZiamKFpo+bYtHUDpNlFB9nOyEgHADwMuQ+GYTBy6GhYmFuAz+fj1t0bX7z/iMgwvE57jWk/zUSd2vXg6eGFlNSUMq17884N9O7eD+3adISfjz+sLK0RGxfz0XU8Pbxx9/5tpWl37t1i/29laQUba1vExETD1cVd6cfZ0aXYbTo7uUAkEuH+w7vstDdvMhAZFfnJj9PC3AK9uvfFqmXrMWf6AmzduaUsTwUhKktNe80GoKVHCgCwYM7v6NitNdp+1QyTJvwMP58AFMgLcOHSOWzZ9hcun7kFN1cPyGQyrF6/Au3adMT1G1fL5coYeztHiMVi/LVlLQb0G4JnoU+xZMVvZVrXzcUNR08cQqvmbcDj8fDrknlQlNIz4PDB32DcD6NRNbA6atesg/3/7EFo+DOlD/wfv5+CaTN/gqGhEZo1boG8/Dw8eHgPGW/S8c2wMUW2aWBgiJ7d+mDW/F9gYmwKCwtLLFo6H3w+n725ryyPc+GSeagSUA0+Xj7Iy8/Hv2dPlulcDyGqjCdQ3+/bFRoKIQNDKnLzSIrJ/Oy+LlycXHH66EUsW/k7Zs6dhsTkVzA3s0CVgGrsSWR/3wDMnbEQK9csw29L5qNO7Xr4ZfIsfPt98Sd0y8rC3ALLF63G/EWzsGHTWgQGVMWMn+diwLDepa47a9p8jJ/0LTp0awUzM3OM+WY8sjIzP7pO547dEB0ThTm/TkduXh46tOmEQf2G4NzFs+wy/XsPhJ6eBKvWLsfsBb9AoieBr7c/RgwpekXUW7OnzcePU79H/6G9YGhgiG9HjkN8Qjx0dHTK/DhFIjHm/zYLsXEx0NXVRXCteli7cmOpzwMhqkxdB9gBAB7zhR355ObmIioqCq6urtDV1S2vusokOTaTOsVTIdJsKaoF+2LmtLnslU4VQVaQj/iXsQg5nIHcDPW99I9orqrNHNGgpyfXZXwWtW4+4vEAigTuhDx6gPDIcNSoVgNvMt9g8fLCpqE2LdtzXBkh3OIL1PdIQc1DgQeKBW6tXv8HIp5HQCwSoUpgNRzcexzmHN58Rogq0DVQ3+ua1TsU1LjdThMEBlTFqSMXuS6DEJWjZ6i+oaC+p8gB8NS6ekKIptIzVN+74tX6Y1UTxjUghGgeCgWOUCgQQlQRNR9xRJ3P8BNCNJeEjhS4IRCqdfmEEA0k0hFAKP78PsO4ptafqgIhHSkQQlSLnpH6HiUAFXxJ6lMf34rcvBLzk1/eUd37rly7hK59OiDswQulQXfUWZde7eHvF4i5M37luhRCNJZEjc8nAGp+pFAebt25CVs3U/Qb3IPrUircxrVbMXni1HLd5tiJozBweNFBeAjRVup85RFAoYAde/7G0IEjce3mVbxKfFnh+5PJPn/cgy9lamIGAwNDzvZPiDagUFBjUmkWDh75Hwb1H4oWTVth177tRZZ58Og+WnVsDBcfG7Tv2hIRkeFK8zdv3YDajarCwdMC9ZoFYe+BXUrzrV2MsXnrBnw9rDdcfG2xbOXvAICTp4+jdacmcPKygm91Vwwa0Y9dp7TB7q9cuwRrF2Ocu3Aazds1gLO3Nbr26YDklGScOXcKDZrXgnuAA74ZOxTZOe8GjunSqz2mzZrM/p6Xl4eZ86aiarAPXHxt0earZuxobACwa+92eAY64dyF02jQvBZc/ezQe0BXJCa9AgAsWroAu/fvwIlTR2HtYgxrF2N2/SfPHqNrnw5w9raGTzUXTJwyFlJp1ie/RoSoG3W+HBXQ8lA4ePR/8HT3hIe7J7p36YWde7YVGapzwaI5mDl1Hk4ePg+hUIjxk75l5x07cRjTZk/GqOFjcOHkdQzoOxjjfhyNy1eVu35YtPxXtGvVAedPXkWfnv1x6uxJDB7ZD82btMLpY5ewb/shVK9ag12+tMHu2e0u+xULZv+OI/v/RcLLeIz4dhDWbVyF1cs3YPvGPbhw6Sz+2ry2xMc/ZcYPuH33Ftau2IjzJ66gU/vO6DOwG56/N1BOTm42Vq1fgZVL1+LgnmOIT4jDzHnTAACjR3yHTu27oFnjFgi5GYaQm2GoFRTMjrhmYmyCE4fOYf2qLbh4+TymTP/xk14fQtSRgWnl9hZd3tS676MvtWP3VnTr3AsA0KxxC4zPfIOr1y+jft2G7DJTfvwF9eo0AAB8N+p79BvcA7m5udDV1cWq9SvQq3tfDP56OADA3W0M7ty7hdXrV6BBvUbsNrp26oE+Pfuzv4/8bgg6d+yGSRN+Zqf5+wWy/y9tsPu3Jv8wDbVr1mHXmffbLNy4eB8uTq4AgA5tv8KVa5fw3ajvizz2uPhY7Nq7HXevPoaNtS0AYPSIsTh74TR27t2GqZNmAChs7lo0byk7BvWQgcPZ3lD19Q2gp6uH/Px8WFlZs9vevX8H8vJysWLJWuhL9AEAC2b/jq+H9sK0ybNgZWn10deFEHVmZqfPdQlfRGuPFCIiw3HvwR106dQdACAUCvFVh67YsWer0nJ+PgHs/60tCz/4UlILm3LCI0JRO6iO0vK1guogLCJUaVrVKtWVfn/8JAQN6zUusbYHIffQf2gv1KjnDzd/e3TuVdgVdVxCXIm1WVpYQU9PwgbC22lva/3Q09AnkMvlqNs0CK5+duzPtRtXEP0iil1OT0/CBkLhc2BT4jbfCo8Ig59vIBsIAFA7KBgKhQKRz8M/siYh6s9czUNBa48Uduz5GwUFBaga7M1OYxgGOmIdLJi1iJ0mEr57it52q6FQfNrALhI9idLvHxuMqCyD3ZdUm0io3JbJ4/GgKGEQIqk0CwKBAKcOX4Dgg6ED9SXvjkY+3CZ4vCJNbISQQgamOtCRqPc5Ba0MhYKCAuzZvwuzps1D44bNlOYNGtEX/zu0Dx5lGCfY08MbN+9cR6/u7y7JvHXnOrw8fT66nq9PAC5dvaDUpPTW+4Pd29s5ACg8cihvgf5VIZfLkZKajDq16332dkRiEeQKudI0Tw8v7N63HdJsKXu0cPPODfD5fLi7qedoVISUhZmdQekLqTitbD7698wJZLxJR9+eX8PX20/pp0ObTkWakEoyesRY7N63A5u3bsDzqEis2bASR08cxujh3310vR/G/YT/HdqH35bMR1hEKJ48e4wVq5cCUB7sPjomCidOHSsy2H15cHfzQLfOPTFmwkgcPXEIL2Kjcff+HSz/czFOnT1Z5u04Ojjh6bPHiIgMR+rrVMhkMnTr3BM6OroYO/EbPA19gstXL+LnGT+iR5fedD6BaDR1bzoCKvhIwffZ04rcPCslPguKgrI36ezYsxWN6jeBkZFxkXnt236FlWuX48mzx6Vup13rDpg7/VesWr8C02ZPhpOjM5YvWqV0oro49es2xIZVW7Dkj9+wYs1SGBoYst/WyzLYfXlZvmgVlq5YhBlzp+JV4kuYmZojqHpNtGzepszb6N97EK5ev4xWnZpAKs3CgZ1HUL9uQ+z6+wCmzfoJbTo1hZ6eHtq37YTZ0+aX+2MgRJWY26t/KPCYL2wgzs3NRVRUFFxdXT/aVl6RMpJzkJfN3U1hpHLJCvIR/zIWIYczkJvxaed3CKlIPafWgqWjet8gqhHNRyIdjXgYhBA1xuPzYGaj/kcKGvFpqs7d1BJCNIOJlR4EIvX/SFX/RwAKBUII9zThyiNAQ0KBz+dBKKJgIIRwRxNOMgMaEgoAIKTzCoQQDpnTkYJqEenQkQIhhCM8wMa96CXu6khzQoHOKxBCOGJupw+Jmg/D+ZbGhIJAxGf7JiKEkMrk4GPGdQnlRmNCgcfjQSjWmIfzye4/vIs1G/785M76CCFfzsHHlOsSyo1GfYpq+nkFaxdjHDt5pMj0lNQUDBs9EL7evuDzv+wlXbR0AZq1bfBF2yirkh4PIeqEL+DB3ktzQqFC+z7685uzFbl5Jd+uaQaRrhB4k1/6wigccD7jTQa2rN9RwZWVn5CbYTA2NlGaplAoMOb7Efhh3OQiPb5WhpjYF6jVsArOHL2EAP8qlb5/Qrhm7WqkUV9INarrbLGOADwN7u///dHN3uLz+dj19wEOqiGEAJp1PgHQsOYjHp8Hse7nJXaXXu3x88xJmL3gF3hXdUZATU8sWrqAnT/ux2/Rb0hPpXVkMhn8gtyxffffAAq/tS//czFqNgiEs7c1mrapj8PH/lFa51nYU/Qb0hPuAQ5w87dHpx5tEP3iOTt/x56taNQyGI5elgis5YUp039g533Y3PLk2WN07dMBzt7W8KnmgolTxkIqzWLnj504CgOH98WqdX8gsJYXfKq5YPIvEyGTfVrngdt2bUGD5rXg5GWF+s1qYtPW9ey8Wg0Ljw6at28IaxdjdPlvlLh7D+6gR/+v4FvdFR6Bjujcsx0ePrr/SfslRB04atD5BEDDQgEAxJLPP/jZs38nJHr6OP7PWUyfMhuL/1iIC5cKm8D69x6AcxdOIzHpFbv8qTMnkJOTg84dugIAlq9ajL0HdmHRvKW4cOo6Rg4djW/Hj8DV65cBAC9fJaBzz7bQEYuxf8chnDp8AX169EdBQeEgNZu3bsCUX35A/z6DcP7ENfy9YafSUJjveztCm4mxCU4cOof1q7bg4uXzmDL9R6Xlrly/hOgXUTiw8wj+WLwGu/btwK5928v8nOz7Zw9+WzIfU378BZfO3MTPk6Zj4eJ52L2vsNntxMHC52fv9oMIuRmGjWsLx6LIkmahV7e+OLT3JI797zRcXd3Qd1APZGVllnnfhKg6ka4A1q5GXJdRrjSq+QgAdPSE+NyPHT8ff/wwfjIAwM3VHX/9vQ4Xr1xA44bNUCsoGB5unth7YBfGfDMeALBz33Z0atcZ+voGyMvLw/I/l2DvtoOoFVQbAODi5Iobt6/h7x2bUK9OA2z8ez0MDY2wdsUmiESFQ/a5u3mw+1+68nd8M3wMRgwZxU6rXjWo2FoPHNyLvLxcrFiylh3dbMHs3/H10F6YNnkWO5iNiZEJFsz+HQKBAJ4eXmjZrBUuXbmAr/sMKtNzsmjpfMycOg/t23QCADg7uiA0PBR/79iEXt37wtzMAgBgZmKm1Lz14RjUixf8Ac8qTrh64wpafcJ4DYSoMjtPE/AFmvXdWuNCgS/gQ6QjgCxPXvrCH/Dz8Vf6vXCQ+hT29769BmDbzs0Y8814JCUn4ez5U9i/4zAAIOrFc+TkZKPn152VtiGT5SPAr7CJ5fGTENSpVY8NhPclpyTjVeLLIh+mJQmPCIOfbyAbCABQOygYCoUCkc/D2VDw9vKBQPCuSc3K0gZPQ0sfQAgoPBqJfhGFCT+NwcQpY9np8oICGBp9/NtRUnISfl08B1evX0ZKagrkcjlycrIRnxBbpn0Tog4cNex8AqCBoQAAYj3hZ4WCsJiB75n3rvvv2a0P5v02E7fu3MTtuzfg5OjMjpgmlUoBANs37oGtja1yPWIdAPjoIER6FTRAUfGPqWwn4t8+pt9//QNB1ZSPWPiCj5+7GTvxG6Slv8bcGQvhYO8IHbEY7bu2RH4+DYZENIcm3Z/wlkaGgo6eENL0vHLfrpmpGdq0bI9d+7bh9t1b6N29HzvP29MbOmIdxCfEoV6d4q/z9/MJwO79OyCTyYocLRgYGMLRwQmXrl5Ag3qNSq3F08MLu/dthzRbyh4t3LxzA3w+H+5unl/wKN+xsrSCjbUtYmKi0b1zz2KXEYsLb+2XK5RD+OadG1g4ZzFaNG0FAIhPiEPq69RyqYsQVWBopgtze83oBO99mtUY9h+hWACBsGIeWv/eA7Bn/06ER4SiV/e+7HQDA0OMGvEdps+Zgt37diD6xXM8fHQfGzavZU/KDhk4AllZmRj53WDcf3gXz6MisffALkREhgMAfhw/BWvWr8T6TWvwPCqSXb843Tr3hI6OLsZO/AZPQ5/g8tWL+HnGj+jRpTfbdFQefvx+Cv5YtQTrN61B5PMIPHn2GDv3bMOaDSsBABbmltDT1cPZC6eRlJyEN28yAABuLm7Y+79dCIsIxZ17tzF6/HDo6eqVW12EcM0jqPz+zlSJRoYCUNiEVBEaNWgKa0sbNG3UHDbWys1EkydOw/ffTcIfq5agQYva6D2wG06fPQknR2cAhUca+3YchlQqRede7dGyY2Ns27UFQlFhrb2698Wc6QuweesGNGoVjP5DeuF5dGSxdUj0JNj19wGkpaehTaemGDZ6ABrWb4wFsxeV6+Pt33sgFi9cgV17t6FJm7ro0qsddu/bASeHwsckFAoxd+ZCbN2xGVWDvTFweGFQLl24EhkZ6WjZvhHGTBiBYYNGwsLcslxrI4RLnrWK3jekCXjMF97plZubi6ioKLi6un60zbyy5ecWID0xu9y3K5VmoWodXyxf9Cd7RQ6pXLKCfMS/jEXI4QzkZlBfT6TymVhL0G9WHa7LqBAaeU4BKOwHiccv+0nV0igUCqS+TsWa9StgbGSM1i3alct2CSHqR1ObjgANDgUejwcdPSFypeVztUtcfCxqNawCO1t7LP99FYRCjX3qCCGl0NSmI0CDQwEAdA1E5RYKTo7OSIzOKJdtEULUl7mDAcxsNWM85uJo7IlmABDrCivsKiRCiHbyrWtb+kJqrNw+MVW1Z1Jdg6J3DxN1x0A1321E0/EFPHjV1tymI6AcQuHtTVjZ2eV/pU950NWnUNA0BYoCMAoGBXkUDaRyOQeYQ89QM8ZiLskXn1MQCAQwMTFBUlISAEAikajeWMlCOWS5n97tBVE9DBhkZL5GWlweCnIpFEjl8tHwpiOgnE4029jYAAAbDKqmIF+OnEzqc0cTMADypAWIvZ3LdSlEy+gZiuASaM51GRWuXEKBx+PB1tYWVlZWnzyAS2VgFAwOLr9fIf0hkcrFMEB+lgIM3bNGKplvPTuN6ya7OOV6SapAIFDqplmVeFa3xfV/npe+ICGEfEAg5KNKMweuy6gUmh97//FrYEeXpxJCPotXsDX0jXW4LqNSaM2npJ6BWKNvTSeEVBAeUL2lE9dVVBqtCQUACGhiz3UJhBA14xJoAVMbzb2D+UNaFQo2rsaw9TDmugxCiBqp0Up7jhIALQsFAKjdwZXrEgghasLGzRi2HiZcl1GptC4UHHzMYOdpwnUZhBA1UF3LjhIALQwFAKjdkY4WCCEfZ2ojgWtVC67LqHRaGQr2Xqaw9zbhugxCiAqr1tJJ9brsqQRaGQoAULuDG9clEEJUlMRYDO/aNlyXwQmtDQU7TxM4+JhyXQYhRAVVbeYIgUg7Px6181H/p3ZHOloghCgzMNVBYFPt6NKiOFodCrbuxnD0M+O6DEKICqnT2R0isWr24VYZtDoUALpvgRDyjrWrkcaPrFYarQ8FGzdjOPlrfh/phJDSNejhqZVXHL1P60MBAII7uULL3weEaD3PmlawcaNucCgUAFg5G8GvIXWWR4i2Eor4qNvVg+syVAKFwn/qdnaDnpFmD8hNCCletZZOMDTT5boMlUCh8B8diQgNutM3BUK0jb6xGDVaO3NdhsqgUHiPV20buqGNEC0T/JU7RDraewnqhygUPtC4jzcN20mIlrB0MoRPXe3szqIk9On3ARNrCWq0oUNJQrQBXYJaFIVCMYJaO8PEWsJ1GYSQChTQyJ7GVikGhUIxBCI+GvXx4roMQkgFMbbSQz26sKRYFAolcPQx0/rb3QnRRDw+Dy0G+Wl1/0YfQ6HwEfW7e0JHIuS6DEJIOarR2onuXP4ICoWPkBiJUb+7J9dlEELKiaWTIWpRJ5gfRaFQCt96tvAKpmYkQtSdQMRHi0F+EAjoY+9j6Nkpg8Z9vOlqJELUXJ2v3GBmp891GSqPQqEMxLpCtB4eoLXD8xGi7uy9TFC1uSPXZagF+pQrIwsHAzToQecXCFE3Yl0Bmg30pZvUyohC4RMENLKHR00rrssghHyCBj29YGSux3UZaoNC4RM17ecDI0t6gxGiDjyCrOBbz5brMtQKhcInEusJ0WZ4AHWaR4iKM7fXR7MBvlyXoXbok+0zWDoZol43d67LIISUQEciRNtvqlCX2J+BQuEzVWnqCLfqllyXQQj5AI/PQ6th/jCmZt7PQqHwBZp9TecXCFE1db5yg5OfOddlqC0KhS+gIxGh45iq0NGn/pEIUQWetaxpaM0vRKHwhUysJWj3TSD4QroGmhAu2bgZozmdWP5iFArlwM7TFM2+pjcjIVwxstBFu1GB1OtAOaBnsJx4B9ugdkfqfZGQyibWE6L96KrQMxRzXYpGoFAoR7Xau8KHbpQhpNLw+Ty0GR5AHd2VIwqFcta0vw9cqlhwXQYhGo/HA5oO8IGjnxnXpWgUCoVyxufz0HqYP2w9aGQnQioMD2jS3wc+dejIvLxRKFQAoViA9qOrwNzegOtSCNE8PKBJX2/41bfjuhKNRKFQQXQkInQcWxVGFrpcl0KIRmnUywv+De25LkNjUShUIH1jHXw1vjoFAyHlpEEPTwQ2ceC6DI3GYxiG4boITSdNz8PB5feR9lLKdSmEqK163TxQvaUT12VoPAqFSpKTlY/DfzxAckwm16UQonbqdnGn7isqCYVCJcrLKcDRPx/gZUQG16UQojaCO7miZju6MbSyUChUMlm+HMdXP0Ts0zSuSyFE5dVs74Lgjm5cl6FVKBQ4IJcpcHLDI0Q9SOG6FEJUE6+wC+ygNi5cV6J1KBQ4opArcGbLU4TdTOS6FEJUikDER/OBvvCsac11KVqJQoFDDMPgws4wPL4Yz3UphKgEPUMR2o2qAhs36hGAKxQKKuDqgQjc+zeG6zII4ZSpjQTtv61Kw2hyjEJBRTy5koCLO8MgL1BwXQohlc7e2wRtRwZCRyLiuhStR6GgQhKj3uDEuhBkpeVxXQohlcanni2a9POGQEAdLKgCCgUVk/0mHyfXP0JCeDrXpRBSsXhAcCc31GzrwnUl5D0UCipIIVfg8r4IhJyL47oUQioEXWGkuigUVNiz6y9xfnso5DI6z0A0h76JDtqMCKArjFQUhYKKS47JxPE1Ich8nct1KYR8Mbdqlmj6tQ909emEsqqiUFADOVn5OLn+MeJDqWsMop6EYj4a9PCkcRDUAIWCmlAoGFw7EIH7Z2IBesWIGrFwNECrof4wtdHnuhRSBhQKaibu2Wuc3foMmanUnERUHA+o2twRdTu7QyCky03VBYWCGsrPLcC1/0Xi0cV4OmogKkliJEbzQb5w8jPnuhTyiSgU1Fh8aBrObn2KNyl01EBUh0ugOZoN8IWeoZjrUshnoFBQc7I8Oa79E4mQ83F01EA4JRDxUa+rB6o0pTGU1RmFgoZICE/D2b+fISM5h+tSiBZy9DVFo97eMLGWcF0K+UIUChpEli/HjX+e4+G5WNCrSiqDxFiMBj086c5kDUKhoIFeRqTj7NZnSE/M5roUoqF4fB4CG9sjuJMbxHpCrssh5YhCQUPJ5QqEnIvD7WPRyMsu4LocokFsPYzRsKcXLJ0MuS6FVAAKBQ2XmyXDzaNReHwhHgoFvdTk8xma6aJuV3dqKtJwFApaIu2VFFf3RyA6JJXrUoiaEeoIENTaCdVaOkEoEnBdDqlgFApaJj4sDdf/icSr52+4LoWoOL6AB+86NqjdwQ0Gpjpcl0MqCYWClop6mIIbByORGi/luhSiYgQiPvzq2aJ6a2cYmulyXQ6pZBQKWoxRMAi7lYibh5/TXdEEIh0B/BvZo1oLR+gb05GBtqJQIFDIFYi8l4yHZ2OpWUkL6UiECGzigKrNHKFrQOMcaDsKBaIkMeoNHpyNReTdJCjk9NbQZHqGIlRt7ojAxg50rwFhUSiQYmWl5SHkQhweX4pHnpTuc9Ak+iY6qN7SCX4N7SAS09VERBmFAvmognw5nl1/hYdnY5H2iu6QVlc8Pg9OfmbwqWsL16oWNL4BKRGFAikThmEQ++Q1HpyJRczT19Qjq5owsZbAp64NfOrYQt+ETh6T0lEokE+WkZyN8NtJiLiThNS4LK7LIR8Q6QrgGWQFn3p2sHU35rocomYoFMgXSXslRcSdJITfTkLaS7rngTM8wN7TBD71bOFew4rOFZDPRqFAyk1qfBYi7hQeQVAPrZWAB1g4GMC1igW869jC2FKP64qIBqBQIBUiOTYTEbeTEHEnkW6MK0c6EiEcfc3g5G8OJ38zusmMlDsKBVLhkmMzkRCWjviwNCREpNMlrp+CB1g6GsI5wBxOfmawdjMGn8/juiqiwSgUSKViGAavE6SID0tHQngaEsLTkZMp47oslaKjL4STrxmcAszh5GcOiZGY65KIFqFQIJxLe/U2JNKREJYGaUY+1yVVGr6AB3N7A1g5G8LKxQjWLkYws9UHj44GCEcoFIjKyUjORnJMFl4nZOF1ghSpCVJkJOeAUfNBgkS6ApjbGcDcXh/m9gawdDKEhaMBjVFAVAqFAlELcpkCaYlSpL3KRkZSDjKSs5GRnIOMpBxkv1GNIwseD9AzEsPARAf6JjrQN9aBgZkOzGwLQ8DQXBc8Hh0BENVGoUDUXn5uATJTc5ErlSEvu4D9Ny9bhjxp4b+52QXIk/73b7YM+dkFYN/5vMJmHD6fB76A/9+/7//w2f/r6ougb/zfh76JzrsAMBFDYiQGX0DdRxD1RqFAtBLDMFAUMOD9FwaEkEIUCoQQQlh0rEsIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYRFoUAIIYT1fwogkMO635buAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacemos los mismo para hacer la las muertes juveniles\n",
        "Juvenil = df['Juvenile']\n",
        "n=df['Juvenile'].isnull()\n",
        "n.sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n5_g4yodWdPl",
        "outputId": "59e4ce06-20d8-4f4a-a7f1-c32bb7f1e0aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#separamos los datos en si fue o no juvenil o si no hay datos\n",
        "Jsi = 0\n",
        "Jno = 0\n",
        "Sin_Datos=0\n",
        "for i in range(len(Juvenil)):\n",
        "  if n[i]==True:\n",
        "    Sin_Datos=Sin_Datos+1\n",
        "  else:\n",
        "    a=str(Juvenil[i]).split(', ')\n",
        "    if len(a)==1:\n",
        "      if a[0]=='Yes':\n",
        "        Jsi=Jsi+1\n",
        "      elif a[0]=='No':\n",
        "        Jno=Jno+1\n",
        "\n",
        "    elif len(a)>1:\n",
        "      for j in a:\n",
        "        b=j.split(' ')\n",
        "        if b[1]=='Yes':\n",
        "          Jsi=Jsi+int(b[0])\n",
        "        elif b[1]=='No':\n",
        "          Jno=Jno+int(b[0])\n",
        "lista_juvenil= [Jsi, Jno, Sin_Datos]"
      ],
      "metadata": {
        "id": "J2CS0dZIWXPD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lista_juvenil"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2gX78fY1X9mP",
        "outputId": "a27fbbcd-9ae4-49ba-bc31-d5b62e05055c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[22, 1420, 0]"
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficamos respescto a la lista creada\n",
        "Juvenil_labels=['Si' ,\"No\", \"Otro/Sin datos\"]\n",
        "plt.pie(lista_juvenil)\n",
        "plt.title('¿Fue una ejecución juvenil?')\n",
        "plt.legend(labels= Juvenil_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "0Oy2xVjsX_iJ",
        "outputId": "7e80f45a-dae8-4ffa-a736-181f65b456cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7b6da591c220>"
            ]
          },
          "metadata": {},
          "execution_count": 117
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Y lo mismo para las que fueron crimenes Federales\n",
        "federal = df['Federal']\n",
        "n=df['Federal'].isnull()\n",
        "n.sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dntCnjaJYeYW",
        "outputId": "468d1035-7e90-4a37-869b-69ee26d01c5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vict_federales = 0\n",
        "vict_nofederales = 0\n",
        "Sin_Datos=0\n",
        "for i in range(len(federal)):\n",
        "  if n[i]==True:\n",
        "    Sin_Datos=Sin_Datos+1\n",
        "  else:\n",
        "    a=str(federal[i]).split(', ')\n",
        "    if len(a)==1:\n",
        "      if a[0]=='Yes':\n",
        "        vict_federales=vict_federales+1\n",
        "      elif a[0]=='No':\n",
        "        vict_nofederales=vict_nofederales+1\n",
        "\n",
        "    elif len(a)>1:\n",
        "      for j in a:\n",
        "        b=j.split(' ')\n",
        "        if b[1]=='Yes':\n",
        "          vict_federales=vict_federales+int(b[0])\n",
        "        elif b[1]=='No':\n",
        "          vict_nofederales=vict_nofederales+int(b[0])\n",
        "lista_federal= [vict_federales,vict_nofederales, Sin_Datos]\n",
        "lista_federal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YSxxGtlaYyse",
        "outputId": "435789ca-50db-4fb5-d370-5caa2e1b486f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3, 1439, 0]"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficamos en base a la lista\n",
        "federal_labels=['Si' ,\"No\"]\n",
        "plt.pie(lista_federal)\n",
        "plt.title('¿Fueron crímenes federales?')\n",
        "plt.legend(labels= federal_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "N8n1THOmZU0d",
        "outputId": "db7ba491-1d1c-44d8-de52-fceea10127ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7b6da4649f00>"
            ]
          },
          "metadata": {},
          "execution_count": 120
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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f/97UlJSmDFjRoWHW26++Waeeuopbr75Zrp27crixYtZt25dscc99dRTLFy4kG7dujF8+HDatWvHvn37WLFiBfPnzy/xP9PxIiMjGT9+PDfeeCN9+vRhyJAhvl1Smzdvzp/+9KcK5S/NpZdeSnx8PPfee6+v1E7mvvvu41//+hfXXHMNw4YNo0uXLuzbt485c+YwadIkOnbsSGpqKrVr12bSpEnEx8dTs2ZNunXrVuoYeGV0796dOnXqkJ6ezl133YXH42Hy5Ml+C0WABQsWcMcdd3DNNdfQqlUrCgoKmDx58in/3CdKSEjg1Vdf5frrr6dz585ce+21JCYm8r///Y+PP/6YHj168NJLLwEwbtw4+vfvT8+ePRk2bBj79u3jxRdfpH379r6hTYA+ffowYsQIxo0bx6pVq7jooouIjIxk/fr1TJs2jRdeeOGkH2wuuugioqKiuPzyyxkxYgQHDx7kjTfeICkpie3bt5f53Ouvv56pU6dy6623snDhQnr06EFhYSE///wzU6dO9R0TMWbMGBYvXkz//v1JSUlh165dvPLKKzRp0oSePXv6veZLL73E448/zqZNmxx5zqugY27HJ3e46aabrOjoaGvDhg2lPqak3Q1PlJOTY910001WrVq1rPj4eGvQoEHWrl27iu2SalmWtXPnTuv222+3mjZtakVGRloNGza0+vXrZ73++uu+xxTtklra7pEffPCBddZZZ1nR0dFW3bp1reuuu87aunWr32PS09OtmjVrlvrznKrrrrvOAqwLLrigxPtP3CXVsixr79691h133GE1btzYioqKspo0aWKlp6f77Yo7e/Zsq127dlZERITf7qml7ZL69NNP+71HafPo7bfftgDr66+/9k1btmyZde6551o1atSwGjVqZN1///3WZ599ZgHWwoULLcuyrF9++cUaNmyYlZqaasXExFh169a1zj//fGv+/PknnUdl/Y0sXLjQSktLs2rVqmXFxMRYqampVkZGhvXNN9/4PW769OlW27ZtrejoaKtdu3bWjBkzis2LIq+//rrVpUsXq0aNGlZ8fLzVoUMH6/7777e2bdvme0xKSorVv3//EvPOmTPHOvPMM62YmBirefPm1vjx46233nrLAqxNmzb5HnfiLqmWZe8WPX78eKt9+/ZWdHS0VadOHatLly7W448/bmVnZ1uWZVmff/65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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Ahpra para ver si las personas ejecutadas eran o no extranjeras\n",
        "extranjeros = df['Foreign National']\n",
        "n=df['Foreign National'].isnull()\n",
        "n.sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ui-oNKZZ015",
        "outputId": "ae51d787-7826-40d4-b558-3e92a423da96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vict_extr = 0\n",
        "vict_noextr = 0\n",
        "Sin_Datos=0\n",
        "for i in range(len(extranjeros)):\n",
        "  if n[i]==True:\n",
        "    Sin_Datos=Sin_Datos+1\n",
        "    #Hacemos el conteo\n",
        "  else:\n",
        "    a=str(extranjeros[i]).split(', ')\n",
        "    if len(a)==1:\n",
        "      if a[0]=='Yes':\n",
        "        vict_extr=vict_extr+1\n",
        "      elif a[0]=='No':\n",
        "        vict_noextr=vict_noextr+1\n",
        "\n",
        "    elif len(a)>1:\n",
        "      for j in a:\n",
        "        b=j.split(' ')\n",
        "        if b[1]=='Yes':\n",
        "          vict_extr=vict_extr+int(b[0])\n",
        "        elif b[1]=='No':\n",
        "          vict_noextr=vict_noextr+int(b[0])\n",
        "lista_extranjeros= [vict_extr,vict_noextr, Sin_Datos]\n",
        "lista_extranjeros"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bfI5jxQAaL80",
        "outputId": "73b6258f-42b7-412a-9997-2351481663c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[36, 1406, 0]"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficamos respecto a la lista de los extranjeros\n",
        "extranjeros_labels=['Si' ,\"No\"]\n",
        "plt.pie(lista_extranjeros)\n",
        "plt.title('¿La persona ejecutada era extranjera?')\n",
        "plt.legend(labels= extranjeros_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "OQXizxndaLg7",
        "outputId": "06424da5-b5c7-441a-9dab-6047070d6399"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7b6da579a560>"
            ]
          },
          "metadata": {},
          "execution_count": 146
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cDfVjX1dHrF1"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}